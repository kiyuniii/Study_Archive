
test_analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cbc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001dc8  08001dc8  00002dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e08  08001e08  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e08  08001e08  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e08  08001e08  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e08  08001e08  00002e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e0c  08001e0c  00002e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e10  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  08001e1c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001e1c  00003060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000437f  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012b2  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00008668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a7  00000000  00000000  00008b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001633f  00000000  00000000  00008f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ce9  00000000  00000000  0001f256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e45  00000000  00000000  00024f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001228  00000000  00000000  000a5dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000a6ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001db0 	.word	0x08001db0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001db0 	.word	0x08001db0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9a4 	bl	800049c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b2 	bl	80002c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f872 	bl	8000244 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000160:	4808      	ldr	r0, [pc, #32]	@ (8000184 <main+0x38>)
 8000162:	f000 fad5 	bl	8000710 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000166:	210a      	movs	r1, #10
 8000168:	4806      	ldr	r0, [pc, #24]	@ (8000184 <main+0x38>)
 800016a:	f000 fb7f 	bl	800086c <HAL_ADC_PollForConversion>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d1f5      	bne.n	8000160 <main+0x14>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000174:	4803      	ldr	r0, [pc, #12]	@ (8000184 <main+0x38>)
 8000176:	f000 fc7f 	bl	8000a78 <HAL_ADC_GetValue>
 800017a:	4603      	mov	r3, r0
 800017c:	b29a      	uxth	r2, r3
 800017e:	4b02      	ldr	r3, [pc, #8]	@ (8000188 <main+0x3c>)
 8000180:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8000182:	e7ed      	b.n	8000160 <main+0x14>
 8000184:	20000028 	.word	0x20000028
 8000188:	20000058 	.word	0x20000058

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	@ 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000196:	2228      	movs	r2, #40	@ 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f001 fddc 	bl	8001d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 f850 	bl	8001288 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ee:	f000 f889 	bl	8000304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fabc 	bl	800178c <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800021a:	f000 f873 	bl	8000304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021e:	2302      	movs	r3, #2
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000226:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fc28 	bl	8001a80 <HAL_RCCEx_PeriphCLKConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000236:	f000 f865 	bl	8000304 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3750      	adds	r7, #80	@ 0x50
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <MX_ADC1_Init+0x74>)
 8000256:	4a19      	ldr	r2, [pc, #100]	@ (80002bc <MX_ADC1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025a:	4b17      	ldr	r3, [pc, #92]	@ (80002b8 <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	@ (80002b8 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000266:	4b14      	ldr	r3, [pc, #80]	@ (80002b8 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026c:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <MX_ADC1_Init+0x74>)
 800026e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000274:	4b10      	ldr	r3, [pc, #64]	@ (80002b8 <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <MX_ADC1_Init+0x74>)
 800027c:	2201      	movs	r2, #1
 800027e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000280:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <MX_ADC1_Init+0x74>)
 8000282:	f000 f96d 	bl	8000560 <HAL_ADC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 f83a 	bl	8000304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000290:	2301      	movs	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <MX_ADC1_Init+0x74>)
 80002a2:	f000 fbf5 	bl	8000a90 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f82a 	bl	8000304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000028 	.word	0x20000028
 80002bc:	40012400 	.word	0x40012400

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <MX_GPIO_Init+0x40>)
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a07      	ldr	r2, [pc, #28]	@ (8000300 <MX_GPIO_Init+0x40>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <MX_GPIO_Init+0x40>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
}
 800030a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <Error_Handler+0x8>

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4b15      	ldr	r3, [pc, #84]	@ (800036c <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a14      	ldr	r2, [pc, #80]	@ (800036c <HAL_MspInit+0x5c>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b12      	ldr	r3, [pc, #72]	@ (800036c <HAL_MspInit+0x5c>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a0e      	ldr	r2, [pc, #56]	@ (800036c <HAL_MspInit+0x5c>)
 8000334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <HAL_MspInit+0x5c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <HAL_MspInit+0x60>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4a04      	ldr	r2, [pc, #16]	@ (8000370 <HAL_MspInit+0x60>)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000
 8000370:	40010000 	.word	0x40010000

08000374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <HAL_ADC_MspInit+0x6c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d121      	bne.n	80003d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000394:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <HAL_ADC_MspInit+0x70>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <HAL_ADC_MspInit+0x70>)
 800039a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <HAL_ADC_MspInit+0x70>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <HAL_ADC_MspInit+0x70>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a0c      	ldr	r2, [pc, #48]	@ (80003e4 <HAL_ADC_MspInit+0x70>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <HAL_ADC_MspInit+0x70>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003c4:	2302      	movs	r3, #2
 80003c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003c8:	2303      	movs	r3, #3
 80003ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4805      	ldr	r0, [pc, #20]	@ (80003e8 <HAL_ADC_MspInit+0x74>)
 80003d4:	f000 fdd4 	bl	8000f80 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40012400 	.word	0x40012400
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010800 	.word	0x40010800

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <NMI_Handler+0x4>

080003f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <HardFault_Handler+0x4>

080003fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <MemManage_Handler+0x4>

08000404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <UsageFault_Handler+0x4>

08000414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 f874 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000450:	f7ff fff8 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480b      	ldr	r0, [pc, #44]	@ (8000484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000456:	490c      	ldr	r1, [pc, #48]	@ (8000488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <LoopFillZerobss+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a09      	ldr	r2, [pc, #36]	@ (8000490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800046c:	4c09      	ldr	r4, [pc, #36]	@ (8000494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047a:	f001 fc75 	bl	8001d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff fe65 	bl	800014c <main>
  bx lr
 8000482:	4770      	bx	lr
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800048c:	08001e10 	.word	0x08001e10
  ldr r2, =_sbss
 8000490:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000494:	20000060 	.word	0x20000060

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <HAL_Init+0x28>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a07      	ldr	r2, [pc, #28]	@ (80004c4 <HAL_Init+0x28>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ac:	2003      	movs	r0, #3
 80004ae:	f000 fd33 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004b2:	200f      	movs	r0, #15
 80004b4:	f000 f808 	bl	80004c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b8:	f7ff ff2a 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d0:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_InitTick+0x54>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <HAL_InitTick+0x58>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004de:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fd3d 	bl	8000f66 <HAL_SYSTICK_Config>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00e      	b.n	8000514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d80a      	bhi.n	8000512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000504:	f000 fd13 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4a06      	ldr	r2, [pc, #24]	@ (8000524 <HAL_InitTick+0x5c>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <HAL_IncTick+0x1c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <HAL_IncTick+0x20>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	4a03      	ldr	r2, [pc, #12]	@ (8000548 <HAL_IncTick+0x20>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	20000008 	.word	0x20000008
 8000548:	2000005c 	.word	0x2000005c

0800054c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b02      	ldr	r3, [pc, #8]	@ (800055c <HAL_GetTick+0x10>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	2000005c 	.word	0x2000005c

08000560 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000568:	2300      	movs	r3, #0
 800056a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d101      	bne.n	8000582 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e0be      	b.n	8000700 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800058c:	2b00      	cmp	r3, #0
 800058e:	d109      	bne.n	80005a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff fee8 	bl	8000374 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 fbc5 	bl	8000d34 <ADC_ConversionStop_Disable>
 80005aa:	4603      	mov	r3, r0
 80005ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f040 8099 	bne.w	80006ee <HAL_ADC_Init+0x18e>
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f040 8095 	bne.w	80006ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80005cc:	f023 0302 	bic.w	r3, r3, #2
 80005d0:	f043 0202 	orr.w	r2, r3, #2
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7b1b      	ldrb	r3, [r3, #12]
 80005e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80005e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005f8:	d003      	beq.n	8000602 <HAL_ADC_Init+0xa2>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d102      	bne.n	8000608 <HAL_ADC_Init+0xa8>
 8000602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000606:	e000      	b.n	800060a <HAL_ADC_Init+0xaa>
 8000608:	2300      	movs	r3, #0
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7d1b      	ldrb	r3, [r3, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d119      	bne.n	800064c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7b1b      	ldrb	r3, [r3, #12]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d109      	bne.n	8000634 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	3b01      	subs	r3, #1
 8000626:	035a      	lsls	r2, r3, #13
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	e00b      	b.n	800064c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000638:	f043 0220 	orr.w	r2, r3, #32
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000644:	f043 0201 	orr.w	r2, r3, #1
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	430a      	orrs	r2, r1
 800065e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <HAL_ADC_Init+0x1a8>)
 8000668:	4013      	ands	r3, r2
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	430b      	orrs	r3, r1
 8000672:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800067c:	d003      	beq.n	8000686 <HAL_ADC_Init+0x126>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d104      	bne.n	8000690 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	3b01      	subs	r3, #1
 800068c:	051b      	lsls	r3, r3, #20
 800068e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000696:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	430a      	orrs	r2, r1
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <HAL_ADC_Init+0x1ac>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d10b      	bne.n	80006cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006be:	f023 0303 	bic.w	r3, r3, #3
 80006c2:	f043 0201 	orr.w	r2, r3, #1
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006ca:	e018      	b.n	80006fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006d0:	f023 0312 	bic.w	r3, r3, #18
 80006d4:	f043 0210 	orr.w	r2, r3, #16
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e0:	f043 0201 	orr.w	r2, r3, #1
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006ec:	e007      	b.n	80006fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f2:	f043 0210 	orr.w	r2, r3, #16
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	ffe1f7fd 	.word	0xffe1f7fd
 800070c:	ff1f0efe 	.word	0xff1f0efe

08000710 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000722:	2b01      	cmp	r3, #1
 8000724:	d101      	bne.n	800072a <HAL_ADC_Start+0x1a>
 8000726:	2302      	movs	r3, #2
 8000728:	e098      	b.n	800085c <HAL_ADC_Start+0x14c>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2201      	movs	r2, #1
 800072e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 faa4 	bl	8000c80 <ADC_Enable>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	2b00      	cmp	r3, #0
 8000740:	f040 8087 	bne.w	8000852 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800074c:	f023 0301 	bic.w	r3, r3, #1
 8000750:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a41      	ldr	r2, [pc, #260]	@ (8000864 <HAL_ADC_Start+0x154>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d105      	bne.n	800076e <HAL_ADC_Start+0x5e>
 8000762:	4b41      	ldr	r3, [pc, #260]	@ (8000868 <HAL_ADC_Start+0x158>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d115      	bne.n	800079a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000772:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000784:	2b00      	cmp	r3, #0
 8000786:	d026      	beq.n	80007d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800078c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000790:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000798:	e01d      	b.n	80007d6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800079e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000868 <HAL_ADC_Start+0x158>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d004      	beq.n	80007ba <HAL_ADC_Start+0xaa>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000864 <HAL_ADC_Start+0x154>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10d      	bne.n	80007d6 <HAL_ADC_Start+0xc6>
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <HAL_ADC_Start+0x158>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d007      	beq.n	80007d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80007ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e6:	f023 0206 	bic.w	r2, r3, #6
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ee:	e002      	b.n	80007f6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f06f 0202 	mvn.w	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000812:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000816:	d113      	bne.n	8000840 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800081c:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <HAL_ADC_Start+0x154>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d105      	bne.n	800082e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_ADC_Start+0x158>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800082a:	2b00      	cmp	r3, #0
 800082c:	d108      	bne.n	8000840 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	e00c      	b.n	800085a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	e003      	b.n	800085a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40012800 	.word	0x40012800
 8000868:	40012400 	.word	0x40012400

0800086c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000882:	f7ff fe63 	bl	800054c <HAL_GetTick>
 8000886:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00b      	beq.n	80008ae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800089a:	f043 0220 	orr.w	r2, r3, #32
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e0d3      	b.n	8000a56 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d131      	bne.n	8000920 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12a      	bne.n	8000920 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80008ca:	e021      	b.n	8000910 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008d2:	d01d      	beq.n	8000910 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <HAL_ADC_PollForConversion+0x7e>
 80008da:	f7ff fe37 	bl	800054c <HAL_GetTick>
 80008de:	4602      	mov	r2, r0
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d212      	bcs.n	8000910 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10b      	bne.n	8000910 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008fc:	f043 0204 	orr.w	r2, r3, #4
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800090c:	2303      	movs	r3, #3
 800090e:	e0a2      	b.n	8000a56 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0d6      	beq.n	80008cc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800091e:	e070      	b.n	8000a02 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000920:	4b4f      	ldr	r3, [pc, #316]	@ (8000a60 <HAL_ADC_PollForConversion+0x1f4>)
 8000922:	681c      	ldr	r4, [r3, #0]
 8000924:	2002      	movs	r0, #2
 8000926:	f001 f961 	bl	8001bec <HAL_RCCEx_GetPeriphCLKFreq>
 800092a:	4603      	mov	r3, r0
 800092c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6919      	ldr	r1, [r3, #16]
 8000936:	4b4b      	ldr	r3, [pc, #300]	@ (8000a64 <HAL_ADC_PollForConversion+0x1f8>)
 8000938:	400b      	ands	r3, r1
 800093a:	2b00      	cmp	r3, #0
 800093c:	d118      	bne.n	8000970 <HAL_ADC_PollForConversion+0x104>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68d9      	ldr	r1, [r3, #12]
 8000944:	4b48      	ldr	r3, [pc, #288]	@ (8000a68 <HAL_ADC_PollForConversion+0x1fc>)
 8000946:	400b      	ands	r3, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d111      	bne.n	8000970 <HAL_ADC_PollForConversion+0x104>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6919      	ldr	r1, [r3, #16]
 8000952:	4b46      	ldr	r3, [pc, #280]	@ (8000a6c <HAL_ADC_PollForConversion+0x200>)
 8000954:	400b      	ands	r3, r1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d108      	bne.n	800096c <HAL_ADC_PollForConversion+0x100>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68d9      	ldr	r1, [r3, #12]
 8000960:	4b43      	ldr	r3, [pc, #268]	@ (8000a70 <HAL_ADC_PollForConversion+0x204>)
 8000962:	400b      	ands	r3, r1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <HAL_ADC_PollForConversion+0x100>
 8000968:	2314      	movs	r3, #20
 800096a:	e020      	b.n	80009ae <HAL_ADC_PollForConversion+0x142>
 800096c:	2329      	movs	r3, #41	@ 0x29
 800096e:	e01e      	b.n	80009ae <HAL_ADC_PollForConversion+0x142>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6919      	ldr	r1, [r3, #16]
 8000976:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <HAL_ADC_PollForConversion+0x200>)
 8000978:	400b      	ands	r3, r1
 800097a:	2b00      	cmp	r3, #0
 800097c:	d106      	bne.n	800098c <HAL_ADC_PollForConversion+0x120>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68d9      	ldr	r1, [r3, #12]
 8000984:	4b3a      	ldr	r3, [pc, #232]	@ (8000a70 <HAL_ADC_PollForConversion+0x204>)
 8000986:	400b      	ands	r3, r1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00d      	beq.n	80009a8 <HAL_ADC_PollForConversion+0x13c>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6919      	ldr	r1, [r3, #16]
 8000992:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <HAL_ADC_PollForConversion+0x208>)
 8000994:	400b      	ands	r3, r1
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <HAL_ADC_PollForConversion+0x140>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68d9      	ldr	r1, [r3, #12]
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <HAL_ADC_PollForConversion+0x208>)
 80009a2:	400b      	ands	r3, r1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <HAL_ADC_PollForConversion+0x140>
 80009a8:	2354      	movs	r3, #84	@ 0x54
 80009aa:	e000      	b.n	80009ae <HAL_ADC_PollForConversion+0x142>
 80009ac:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80009ae:	fb02 f303 	mul.w	r3, r2, r3
 80009b2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80009b4:	e021      	b.n	80009fa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009bc:	d01a      	beq.n	80009f4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d007      	beq.n	80009d4 <HAL_ADC_PollForConversion+0x168>
 80009c4:	f7ff fdc2 	bl	800054c <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d20f      	bcs.n	80009f4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d90b      	bls.n	80009f4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009e0:	f043 0204 	orr.w	r2, r3, #4
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e030      	b.n	8000a56 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d8d9      	bhi.n	80009b6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f06f 0212 	mvn.w	r2, #18
 8000a0a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000a22:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a26:	d115      	bne.n	8000a54 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d111      	bne.n	8000a54 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d105      	bne.n	8000a54 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	371c      	adds	r7, #28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000
 8000a64:	24924924 	.word	0x24924924
 8000a68:	00924924 	.word	0x00924924
 8000a6c:	12492492 	.word	0x12492492
 8000a70:	00492492 	.word	0x00492492
 8000a74:	00249249 	.word	0x00249249

08000a78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d101      	bne.n	8000ab0 <HAL_ADC_ConfigChannel+0x20>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e0dc      	b.n	8000c6a <HAL_ADC_ConfigChannel+0x1da>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d81c      	bhi.n	8000afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b05      	subs	r3, #5
 8000ad2:	221f      	movs	r2, #31
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4019      	ands	r1, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	3b05      	subs	r3, #5
 8000aec:	fa00 f203 	lsl.w	r2, r0, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af8:	e03c      	b.n	8000b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b0c      	cmp	r3, #12
 8000b00:	d81c      	bhi.n	8000b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	3b23      	subs	r3, #35	@ 0x23
 8000b14:	221f      	movs	r2, #31
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4019      	ands	r1, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3b23      	subs	r3, #35	@ 0x23
 8000b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b3a:	e01b      	b.n	8000b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b41      	subs	r3, #65	@ 0x41
 8000b4e:	221f      	movs	r2, #31
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4019      	ands	r1, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	3b41      	subs	r3, #65	@ 0x41
 8000b68:	fa00 f203 	lsl.w	r2, r0, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d91c      	bls.n	8000bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68d9      	ldr	r1, [r3, #12]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b1e      	subs	r3, #30
 8000b8e:	2207      	movs	r2, #7
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4019      	ands	r1, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6898      	ldr	r0, [r3, #8]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b1e      	subs	r3, #30
 8000ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e019      	b.n	8000bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6919      	ldr	r1, [r3, #16]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4019      	ands	r1, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	fa00 f203 	lsl.w	r2, r0, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b10      	cmp	r3, #16
 8000bf0:	d003      	beq.n	8000bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bf6:	2b11      	cmp	r3, #17
 8000bf8:	d132      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8000c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d125      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d126      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000c20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d11a      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	0c9a      	lsrs	r2, r3, #18
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c40:	e002      	b.n	8000c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f9      	bne.n	8000c42 <HAL_ADC_ConfigChannel+0x1b2>
 8000c4e:	e007      	b.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c54:	f043 0220 	orr.w	r2, r3, #32
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40012400 	.word	0x40012400
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	431bde83 	.word	0x431bde83

08000c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d040      	beq.n	8000d20 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0201 	orr.w	r2, r2, #1
 8000cac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cae:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <ADC_Enable+0xac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d30 <ADC_Enable+0xb0>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000cbc:	e002      	b.n	8000cc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f9      	bne.n	8000cbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000cca:	f7ff fc3f 	bl	800054c <HAL_GetTick>
 8000cce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cd0:	e01f      	b.n	8000d12 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cd2:	f7ff fc3b 	bl	800054c <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d918      	bls.n	8000d12 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d011      	beq.n	8000d12 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf2:	f043 0210 	orr.w	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e007      	b.n	8000d22 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d1d8      	bne.n	8000cd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d12e      	bne.n	8000dac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d5e:	f7ff fbf5 	bl	800054c <HAL_GetTick>
 8000d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d64:	e01b      	b.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d66:	f7ff fbf1 	bl	800054c <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d914      	bls.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10d      	bne.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e007      	b.n	8000dae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d0dc      	beq.n	8000d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef8:	f7ff ff90 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff49 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff90 	bl	8000e70 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b08b      	sub	sp, #44	@ 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e169      	b.n	8001268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f94:	2201      	movs	r2, #1
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8158 	bne.w	8001262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d05e      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fbc:	4a98      	ldr	r2, [pc, #608]	@ (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d875      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fc2:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d058      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fc8:	4a96      	ldr	r2, [pc, #600]	@ (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d86f      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fce:	4a96      	ldr	r2, [pc, #600]	@ (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d052      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fd4:	4a94      	ldr	r2, [pc, #592]	@ (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d869      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fda:	4a94      	ldr	r2, [pc, #592]	@ (800122c <HAL_GPIO_Init+0x2ac>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d04c      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fe0:	4a92      	ldr	r2, [pc, #584]	@ (800122c <HAL_GPIO_Init+0x2ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d863      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fe6:	4a92      	ldr	r2, [pc, #584]	@ (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d046      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fec:	4a90      	ldr	r2, [pc, #576]	@ (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d85d      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d82a      	bhi.n	800104c <HAL_GPIO_Init+0xcc>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d859      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <HAL_GPIO_Init+0x80>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	0800107b 	.word	0x0800107b
 8001004:	08001055 	.word	0x08001055
 8001008:	08001067 	.word	0x08001067
 800100c:	080010a9 	.word	0x080010a9
 8001010:	080010af 	.word	0x080010af
 8001014:	080010af 	.word	0x080010af
 8001018:	080010af 	.word	0x080010af
 800101c:	080010af 	.word	0x080010af
 8001020:	080010af 	.word	0x080010af
 8001024:	080010af 	.word	0x080010af
 8001028:	080010af 	.word	0x080010af
 800102c:	080010af 	.word	0x080010af
 8001030:	080010af 	.word	0x080010af
 8001034:	080010af 	.word	0x080010af
 8001038:	080010af 	.word	0x080010af
 800103c:	080010af 	.word	0x080010af
 8001040:	080010af 	.word	0x080010af
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001071 	.word	0x08001071
 800104c:	4a79      	ldr	r2, [pc, #484]	@ (8001234 <HAL_GPIO_Init+0x2b4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001052:	e02c      	b.n	80010ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e029      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	3304      	adds	r3, #4
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e024      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	3308      	adds	r3, #8
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e01f      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	330c      	adds	r3, #12
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e01a      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001082:	2304      	movs	r3, #4
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e013      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001090:	2308      	movs	r3, #8
 8001092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	611a      	str	r2, [r3, #16]
          break;
 800109a:	e009      	b.n	80010b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	615a      	str	r2, [r3, #20]
          break;
 80010a6:	e003      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          break;
 80010ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2bff      	cmp	r3, #255	@ 0xff
 80010b4:	d801      	bhi.n	80010ba <HAL_GPIO_Init+0x13a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e001      	b.n	80010be <HAL_GPIO_Init+0x13e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d802      	bhi.n	80010cc <HAL_GPIO_Init+0x14c>
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x152>
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	3b08      	subs	r3, #8
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	210f      	movs	r1, #15
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	6a39      	ldr	r1, [r7, #32]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80b1 	beq.w	8001262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001100:	4b4d      	ldr	r3, [pc, #308]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b4a      	ldr	r3, [pc, #296]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001118:	4a48      	ldr	r2, [pc, #288]	@ (800123c <HAL_GPIO_Init+0x2bc>)
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a40      	ldr	r2, [pc, #256]	@ (8001240 <HAL_GPIO_Init+0x2c0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1ec>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3f      	ldr	r2, [pc, #252]	@ (8001244 <HAL_GPIO_Init+0x2c4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1e8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3e      	ldr	r2, [pc, #248]	@ (8001248 <HAL_GPIO_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1e4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1e0>
 800115c:	2303      	movs	r3, #3
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001160:	2304      	movs	r3, #4
 8001162:	e004      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001164:	2302      	movs	r3, #2
 8001166:	e002      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 800116c:	2300      	movs	r3, #0
 800116e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800117e:	492f      	ldr	r1, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x2bc>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	492c      	ldr	r1, [pc, #176]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4928      	ldr	r1, [pc, #160]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	4922      	ldr	r1, [pc, #136]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	491e      	ldr	r1, [pc, #120]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4918      	ldr	r1, [pc, #96]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4914      	ldr	r1, [pc, #80]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d021      	beq.n	8001254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e021      	b.n	8001262 <HAL_GPIO_Init+0x2e2>
 800121e:	bf00      	nop
 8001220:	10320000 	.word	0x10320000
 8001224:	10310000 	.word	0x10310000
 8001228:	10220000 	.word	0x10220000
 800122c:	10210000 	.word	0x10210000
 8001230:	10120000 	.word	0x10120000
 8001234:	10110000 	.word	0x10110000
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000
 8001240:	40010800 	.word	0x40010800
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011000 	.word	0x40011000
 800124c:	40011400 	.word	0x40011400
 8001250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4909      	ldr	r1, [pc, #36]	@ (8001284 <HAL_GPIO_Init+0x304>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae8e 	bne.w	8000f94 <HAL_GPIO_Init+0x14>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	372c      	adds	r7, #44	@ 0x2c
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e272      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8087 	beq.w	80013b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a8:	4b92      	ldr	r3, [pc, #584]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d00c      	beq.n	80012ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b4:	4b8f      	ldr	r3, [pc, #572]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d112      	bne.n	80012e6 <HAL_RCC_OscConfig+0x5e>
 80012c0:	4b8c      	ldr	r3, [pc, #560]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012cc:	d10b      	bne.n	80012e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ce:	4b89      	ldr	r3, [pc, #548]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d06c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x12c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d168      	bne.n	80013b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e24c      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x76>
 80012f0:	4b80      	ldr	r3, [pc, #512]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a7f      	ldr	r2, [pc, #508]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e02e      	b.n	800135c <HAL_RCC_OscConfig+0xd4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a7a      	ldr	r2, [pc, #488]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800130c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b78      	ldr	r3, [pc, #480]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a77      	ldr	r2, [pc, #476]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001318:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xd4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0xbc>
 800132a:	4b72      	ldr	r3, [pc, #456]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a71      	ldr	r2, [pc, #452]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6f      	ldr	r3, [pc, #444]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6e      	ldr	r2, [pc, #440]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xd4>
 8001344:	4b6b      	ldr	r3, [pc, #428]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a6a      	ldr	r2, [pc, #424]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b68      	ldr	r3, [pc, #416]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a67      	ldr	r2, [pc, #412]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff f8f2 	bl	800054c <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff f8ee 	bl	800054c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e200      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b5d      	ldr	r3, [pc, #372]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xe4>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff f8de 	bl	800054c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff f8da 	bl	800054c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1ec      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b53      	ldr	r3, [pc, #332]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x10c>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c2:	4b4c      	ldr	r3, [pc, #304]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ce:	4b49      	ldr	r3, [pc, #292]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x18c>
 80013da:	4b46      	ldr	r3, [pc, #280]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x176>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c0      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4939      	ldr	r1, [pc, #228]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff f893 	bl	800054c <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff f88f 	bl	800054c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a1      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4927      	ldr	r1, [pc, #156]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff f872 	bl	800054c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff f86e 	bl	800054c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e180      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d03a      	beq.n	800150c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d019      	beq.n	80014d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <HAL_RCC_OscConfig+0x274>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f852 	bl	800054c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff f84e 	bl	800054c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e160      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 faba 	bl	8001a44 <RCC_Delay>
 80014d0:	e01c      	b.n	800150c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_RCC_OscConfig+0x274>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f838 	bl	800054c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014de:	e00f      	b.n	8001500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff f834 	bl	800054c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d908      	bls.n	8001500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e146      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	42420000 	.word	0x42420000
 80014fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b92      	ldr	r3, [pc, #584]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e9      	bne.n	80014e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a6 	beq.w	8001666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b8b      	ldr	r3, [pc, #556]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a87      	ldr	r2, [pc, #540]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b85      	ldr	r3, [pc, #532]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b82      	ldr	r3, [pc, #520]	@ (8001750 <HAL_RCC_OscConfig+0x4c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	4b7f      	ldr	r3, [pc, #508]	@ (8001750 <HAL_RCC_OscConfig+0x4c8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7e      	ldr	r2, [pc, #504]	@ (8001750 <HAL_RCC_OscConfig+0x4c8>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7fe fff5 	bl	800054c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001566:	f7fe fff1 	bl	800054c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	@ 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e103      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	4b75      	ldr	r3, [pc, #468]	@ (8001750 <HAL_RCC_OscConfig+0x4c8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x312>
 800158c:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a6e      	ldr	r2, [pc, #440]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e02d      	b.n	80015f6 <HAL_RCC_OscConfig+0x36e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015a2:	4b6a      	ldr	r3, [pc, #424]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a69      	ldr	r2, [pc, #420]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	4b67      	ldr	r3, [pc, #412]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4a66      	ldr	r2, [pc, #408]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6213      	str	r3, [r2, #32]
 80015ba:	e01c      	b.n	80015f6 <HAL_RCC_OscConfig+0x36e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x356>
 80015c4:	4b61      	ldr	r3, [pc, #388]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4a60      	ldr	r2, [pc, #384]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6213      	str	r3, [r2, #32]
 80015d0:	4b5e      	ldr	r3, [pc, #376]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a5d      	ldr	r2, [pc, #372]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0x36e>
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a5a      	ldr	r2, [pc, #360]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	4b58      	ldr	r3, [pc, #352]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a57      	ldr	r2, [pc, #348]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7fe ffa5 	bl	800054c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7fe ffa1 	bl	800054c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0b1      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ee      	beq.n	8001606 <HAL_RCC_OscConfig+0x37e>
 8001628:	e014      	b.n	8001654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7fe ff8f 	bl	800054c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7fe ff8b 	bl	800054c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e09b      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	4b40      	ldr	r3, [pc, #256]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a3b      	ldr	r2, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8087 	beq.w	800177e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001670:	4b36      	ldr	r3, [pc, #216]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d061      	beq.n	8001740 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d146      	bne.n	8001712 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_RCC_OscConfig+0x4cc>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7fe ff5f 	bl	800054c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7fe ff5b 	bl	800054c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e06d      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b8:	d108      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4921      	ldr	r1, [pc, #132]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016cc:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a19      	ldr	r1, [r3, #32]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	430b      	orrs	r3, r1
 80016de:	491b      	ldr	r1, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <HAL_RCC_OscConfig+0x4cc>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7fe ff2f 	bl	800054c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7fe ff2b 	bl	800054c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e03d      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x46a>
 8001710:	e035      	b.n	800177e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_RCC_OscConfig+0x4cc>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7fe ff18 	bl	800054c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7fe ff14 	bl	800054c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e026      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_RCC_OscConfig+0x4c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x498>
 800173e:	e01e      	b.n	800177e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e019      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_RCC_OscConfig+0x500>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	429a      	cmp	r2, r3
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0d0      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d910      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b67      	ldr	r3, [pc, #412]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 0207 	bic.w	r2, r3, #7
 80017b6:	4965      	ldr	r1, [pc, #404]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a58      	ldr	r2, [pc, #352]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a52      	ldr	r2, [pc, #328]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800180a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d040      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d115      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e073      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3d      	ldr	r3, [pc, #244]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06b      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b39      	ldr	r3, [pc, #228]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4936      	ldr	r1, [pc, #216]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7fe fe66 	bl	800054c <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7fe fe62 	bl	800054c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e053      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d210      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b24      	ldr	r3, [pc, #144]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4922      	ldr	r1, [pc, #136]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	@ (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <HAL_RCC_ClockConfig+0x1cc>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1d0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fdc4 	bl	80004c8 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000
 8001950:	40021000 	.word	0x40021000
 8001954:	08001dc8 	.word	0x08001dc8
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b04      	cmp	r3, #4
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x30>
 800198a:	2b08      	cmp	r3, #8
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x36>
 800198e:	e027      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001992:	613b      	str	r3, [r7, #16]
      break;
 8001994:	e027      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	0c9b      	lsrs	r3, r3, #18
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0c5b      	lsrs	r3, r3, #17
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80019c2:	fb03 f202 	mul.w	r2, r3, r2
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e004      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	613b      	str	r3, [r7, #16]
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80019e2:	613b      	str	r3, [r7, #16]
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	693b      	ldr	r3, [r7, #16]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	007a1200 	.word	0x007a1200
 80019fc:	08001de0 	.word	0x08001de0
 8001a00:	08001df0 	.word	0x08001df0
 8001a04:	003d0900 	.word	0x003d0900

08001a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	@ (8001a18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a20:	f7ff fff2 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	0adb      	lsrs	r3, r3, #11
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	@ (8001a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	08001dd8 	.word	0x08001dd8

08001a44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <RCC_Delay+0x34>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <RCC_Delay+0x38>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0a5b      	lsrs	r3, r3, #9
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a60:	bf00      	nop
  }
  while (Delay --);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	60fa      	str	r2, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f9      	bne.n	8001a60 <RCC_Delay+0x1c>
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d07d      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d118      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe fd34 	bl	800054c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	e008      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae8:	f7fe fd30 	bl	800054c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	@ 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e06d      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b06:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d02e      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d027      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b3a:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d014      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7fe fcff 	bl	800054c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe fcfb 	bl	800054c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e036      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4917      	ldr	r1, [pc, #92]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a13      	ldr	r2, [pc, #76]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	490b      	ldr	r1, [pc, #44]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4904      	ldr	r1, [pc, #16]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42420440 	.word	0x42420440

08001bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d00a      	beq.n	8001c24 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	f200 808a 	bhi.w	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d045      	beq.n	8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d075      	beq.n	8001d0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001c22:	e082      	b.n	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001c24:	4b46      	ldr	r3, [pc, #280]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001c2a:	4b45      	ldr	r3, [pc, #276]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d07b      	beq.n	8001d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a41      	ldr	r2, [pc, #260]	@ (8001d44 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d015      	beq.n	8001c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0c5b      	lsrs	r3, r3, #17
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001c68:	4a38      	ldr	r2, [pc, #224]	@ (8001d4c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	e004      	b.n	8001c84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4a34      	ldr	r2, [pc, #208]	@ (8001d50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001c84:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c90:	d102      	bne.n	8001c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	61bb      	str	r3, [r7, #24]
      break;
 8001c96:	e04a      	b.n	8001d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
      break;
 8001ca6:	e042      	b.n	8001d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cb8:	d108      	bne.n	8001ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	e01f      	b.n	8001d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cd6:	d109      	bne.n	8001cec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001ce4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	e00f      	b.n	8001d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cf6:	d11c      	bne.n	8001d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d016      	beq.n	8001d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001d04:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001d08:	61bb      	str	r3, [r7, #24]
      break;
 8001d0a:	e012      	b.n	8001d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d0c:	e011      	b.n	8001d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d0e:	f7ff fe85 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0b9b      	lsrs	r3, r3, #14
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	61bb      	str	r3, [r7, #24]
      break;
 8001d28:	e004      	b.n	8001d34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e002      	b.n	8001d34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d32:	bf00      	nop
    }
  }
  return (frequency);
 8001d34:	69bb      	ldr	r3, [r7, #24]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08001df4 	.word	0x08001df4
 8001d48:	08001e04 	.word	0x08001e04
 8001d4c:	007a1200 	.word	0x007a1200
 8001d50:	003d0900 	.word	0x003d0900
 8001d54:	aaaaaaab 	.word	0xaaaaaaab

08001d58 <memset>:
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4402      	add	r2, r0
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <memset+0xa>
 8001d60:	4770      	bx	lr
 8001d62:	f803 1b01 	strb.w	r1, [r3], #1
 8001d66:	e7f9      	b.n	8001d5c <memset+0x4>

08001d68 <__libc_init_array>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	4d0c      	ldr	r5, [pc, #48]	@ (8001da0 <__libc_init_array+0x38>)
 8001d6e:	4c0d      	ldr	r4, [pc, #52]	@ (8001da4 <__libc_init_array+0x3c>)
 8001d70:	1b64      	subs	r4, r4, r5
 8001d72:	10a4      	asrs	r4, r4, #2
 8001d74:	42a6      	cmp	r6, r4
 8001d76:	d109      	bne.n	8001d8c <__libc_init_array+0x24>
 8001d78:	f000 f81a 	bl	8001db0 <_init>
 8001d7c:	2600      	movs	r6, #0
 8001d7e:	4d0a      	ldr	r5, [pc, #40]	@ (8001da8 <__libc_init_array+0x40>)
 8001d80:	4c0a      	ldr	r4, [pc, #40]	@ (8001dac <__libc_init_array+0x44>)
 8001d82:	1b64      	subs	r4, r4, r5
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	42a6      	cmp	r6, r4
 8001d88:	d105      	bne.n	8001d96 <__libc_init_array+0x2e>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d90:	4798      	blx	r3
 8001d92:	3601      	adds	r6, #1
 8001d94:	e7ee      	b.n	8001d74 <__libc_init_array+0xc>
 8001d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9a:	4798      	blx	r3
 8001d9c:	3601      	adds	r6, #1
 8001d9e:	e7f2      	b.n	8001d86 <__libc_init_array+0x1e>
 8001da0:	08001e08 	.word	0x08001e08
 8001da4:	08001e08 	.word	0x08001e08
 8001da8:	08001e08 	.word	0x08001e08
 8001dac:	08001e0c 	.word	0x08001e0c

08001db0 <_init>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	bf00      	nop
 8001db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db6:	bc08      	pop	{r3}
 8001db8:	469e      	mov	lr, r3
 8001dba:	4770      	bx	lr

08001dbc <_fini>:
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	bf00      	nop
 8001dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc2:	bc08      	pop	{r3}
 8001dc4:	469e      	mov	lr, r3
 8001dc6:	4770      	bx	lr
