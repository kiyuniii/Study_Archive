
rtos_3leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006120  08006120  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006128  08006128  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006128  08006128  00007128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800612c  0800612c  0000712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006130  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012bc  20000064  08006194  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001320  08006194  00008320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154d4  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003483  00000000  00000000  0001d561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000209e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f76  00000000  00000000  00021de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2ab  00000000  00000000  00022d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158a3  00000000  00000000  0003d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095492  00000000  00000000  000528a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005818  00000000  00000000  000e7d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ed594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005638 	.word	0x08005638

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005638 	.word	0x08005638

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b08d      	sub	sp, #52	@ 0x34
 8000164:	af02      	add	r7, sp, #8
 8000166:	60b9      	str	r1, [r7, #8]
 8000168:	4611      	mov	r1, r2
 800016a:	461a      	mov	r2, r3
 800016c:	4603      	mov	r3, r0
 800016e:	73fb      	strb	r3, [r7, #15]
 8000170:	460b      	mov	r3, r1
 8000172:	81bb      	strh	r3, [r7, #12]
 8000174:	4613      	mov	r3, r2
 8000176:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000178:	7bfb      	ldrb	r3, [r7, #15]
 800017a:	2b1e      	cmp	r3, #30
 800017c:	d964      	bls.n	8000248 <ILI9341_DrawChar+0xe8>
 800017e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000182:	2b00      	cmp	r3, #0
 8000184:	db60      	blt.n	8000248 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	3301      	adds	r3, #1
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	3302      	adds	r3, #2
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	3303      	adds	r3, #3
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
 80001a6:	3b20      	subs	r3, #32
 80001a8:	7ffa      	ldrb	r2, [r7, #31]
 80001aa:	fb02 f303 	mul.w	r3, r2, r3
 80001ae:	3304      	adds	r3, #4
 80001b0:	68ba      	ldr	r2, [r7, #8]
 80001b2:	4413      	add	r3, r2
 80001b4:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80001b6:	7fbb      	ldrb	r3, [r7, #30]
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	7f7b      	ldrb	r3, [r7, #29]
 80001bc:	b29c      	uxth	r4, r3
 80001be:	88f9      	ldrh	r1, [r7, #6]
 80001c0:	89b8      	ldrh	r0, [r7, #12]
 80001c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	4623      	mov	r3, r4
 80001c8:	f000 fbfe 	bl	80009c8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80001cc:	2300      	movs	r3, #0
 80001ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80001d0:	e035      	b.n	800023e <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80001d2:	2300      	movs	r3, #0
 80001d4:	623b      	str	r3, [r7, #32]
 80001d6:	e02b      	b.n	8000230 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80001d8:	7f3b      	ldrb	r3, [r7, #28]
 80001da:	6a3a      	ldr	r2, [r7, #32]
 80001dc:	fb03 f202 	mul.w	r2, r3, r2
 80001e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001e2:	10db      	asrs	r3, r3, #3
 80001e4:	f003 031f 	and.w	r3, r3, #31
 80001e8:	4413      	add	r3, r2
 80001ea:	3301      	adds	r3, #1
 80001ec:	69ba      	ldr	r2, [r7, #24]
 80001ee:	4413      	add	r3, r2
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80001f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001f6:	f003 0307 	and.w	r3, r3, #7
 80001fa:	2201      	movs	r2, #1
 80001fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000200:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000202:	7dfa      	ldrb	r2, [r7, #23]
 8000204:	7dbb      	ldrb	r3, [r7, #22]
 8000206:	4013      	ands	r3, r2
 8000208:	b2db      	uxtb	r3, r3
 800020a:	2b00      	cmp	r3, #0
 800020c:	d00d      	beq.n	800022a <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800020e:	6a3b      	ldr	r3, [r7, #32]
 8000210:	b29a      	uxth	r2, r3
 8000212:	89bb      	ldrh	r3, [r7, #12]
 8000214:	4413      	add	r3, r2
 8000216:	b298      	uxth	r0, r3
 8000218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800021a:	b29a      	uxth	r2, r3
 800021c:	88fb      	ldrh	r3, [r7, #6]
 800021e:	4413      	add	r3, r2
 8000220:	b29b      	uxth	r3, r3
 8000222:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000224:	4619      	mov	r1, r3
 8000226:	f000 fb69 	bl	80008fc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800022a:	6a3b      	ldr	r3, [r7, #32]
 800022c:	3301      	adds	r3, #1
 800022e:	623b      	str	r3, [r7, #32]
 8000230:	7fbb      	ldrb	r3, [r7, #30]
 8000232:	6a3a      	ldr	r2, [r7, #32]
 8000234:	429a      	cmp	r2, r3
 8000236:	dbcf      	blt.n	80001d8 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800023a:	3301      	adds	r3, #1
 800023c:	627b      	str	r3, [r7, #36]	@ 0x24
 800023e:	7f7b      	ldrb	r3, [r7, #29]
 8000240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000242:	429a      	cmp	r2, r3
 8000244:	dbc5      	blt.n	80001d2 <ILI9341_DrawChar+0x72>
 8000246:	e000      	b.n	800024a <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000248:	bf00      	nop
			}
		}
	}
}
 800024a:	372c      	adds	r7, #44	@ 0x2c
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b08a      	sub	sp, #40	@ 0x28
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	4611      	mov	r1, r2
 800025c:	461a      	mov	r2, r3
 800025e:	460b      	mov	r3, r1
 8000260:	80fb      	strh	r3, [r7, #6]
 8000262:	4613      	mov	r3, r2
 8000264:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	3301      	adds	r3, #1
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000274:	e02d      	b.n	80002d2 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	7818      	ldrb	r0, [r3, #0]
 800027a:	88b9      	ldrh	r1, [r7, #4]
 800027c:	88fa      	ldrh	r2, [r7, #6]
 800027e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	460b      	mov	r3, r1
 8000288:	68b9      	ldr	r1, [r7, #8]
 800028a:	f7ff ff69 	bl	8000160 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	3b20      	subs	r3, #32
 8000294:	7ffa      	ldrb	r2, [r7, #31]
 8000296:	fb02 f303 	mul.w	r3, r2, r3
 800029a:	3304      	adds	r3, #4
 800029c:	68ba      	ldr	r2, [r7, #8]
 800029e:	4413      	add	r3, r2
 80002a0:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	1c9a      	adds	r2, r3, #2
 80002ac:	7fbb      	ldrb	r3, [r7, #30]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	da07      	bge.n	80002c2 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80002b2:	7dfb      	ldrb	r3, [r7, #23]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	4413      	add	r3, r2
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	3302      	adds	r3, #2
 80002be:	80fb      	strh	r3, [r7, #6]
 80002c0:	e004      	b.n	80002cc <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 80002c2:	7fbb      	ldrb	r3, [r7, #30]
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	4413      	add	r3, r2
 80002ca:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3301      	adds	r3, #1
 80002d0:	60fb      	str	r3, [r7, #12]
	while (*str)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1cd      	bne.n	8000276 <ILI9341_DrawText+0x26>
	}
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3720      	adds	r7, #32
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a06      	ldr	r2, [pc, #24]	@ (8000308 <HAL_SPI_TxCpltCallback+0x24>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d104      	bne.n	80002fe <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2110      	movs	r1, #16
 80002f8:	4804      	ldr	r0, [pc, #16]	@ (800030c <HAL_SPI_TxCpltCallback+0x28>)
 80002fa:	f001 fdb3 	bl	8001e64 <HAL_GPIO_WritePin>
  }
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000320 	.word	0x20000320
 800030c:	40010800 	.word	0x40010800

08000310 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800031a:	bf00      	nop
 800031c:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <ILI9341_SPI_Tx+0x30>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	2b02      	cmp	r3, #2
 8000328:	d1f8      	bne.n	800031c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	2201      	movs	r2, #1
 800032e:	4619      	mov	r1, r3
 8000330:	4803      	ldr	r0, [pc, #12]	@ (8000340 <ILI9341_SPI_Tx+0x30>)
 8000332:	f002 fbb7 	bl	8002aa4 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000320 	.word	0x20000320

08000344 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000350:	bf00      	nop
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <ILI9341_SPI_TxBuffer+0x30>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f003 0302 	and.w	r3, r3, #2
 800035c:	2b02      	cmp	r3, #2
 800035e:	d1f8      	bne.n	8000352 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000360:	887b      	ldrh	r3, [r7, #2]
 8000362:	461a      	mov	r2, r3
 8000364:	6879      	ldr	r1, [r7, #4]
 8000366:	4803      	ldr	r0, [pc, #12]	@ (8000374 <ILI9341_SPI_TxBuffer+0x30>)
 8000368:	f002 fb9c 	bl	8002aa4 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000320 	.word	0x20000320

08000378 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000382:	2200      	movs	r2, #0
 8000384:	2102      	movs	r1, #2
 8000386:	4808      	ldr	r0, [pc, #32]	@ (80003a8 <ILI9341_WriteCommand+0x30>)
 8000388:	f001 fd6c 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800038c:	2200      	movs	r2, #0
 800038e:	2110      	movs	r1, #16
 8000390:	4806      	ldr	r0, [pc, #24]	@ (80003ac <ILI9341_WriteCommand+0x34>)
 8000392:	f001 fd67 	bl	8001e64 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ffb9 	bl	8000310 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	40010800 	.word	0x40010800

080003b0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80003ba:	2201      	movs	r2, #1
 80003bc:	2102      	movs	r1, #2
 80003be:	4808      	ldr	r0, [pc, #32]	@ (80003e0 <ILI9341_WriteData+0x30>)
 80003c0:	f001 fd50 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80003c4:	2200      	movs	r2, #0
 80003c6:	2110      	movs	r1, #16
 80003c8:	4806      	ldr	r0, [pc, #24]	@ (80003e4 <ILI9341_WriteData+0x34>)
 80003ca:	f001 fd4b 	bl	8001e64 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff9d 	bl	8000310 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010c00 	.word	0x40010c00
 80003e4:	40010800 	.word	0x40010800

080003e8 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	460b      	mov	r3, r1
 80003f2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80003f4:	2201      	movs	r2, #1
 80003f6:	2102      	movs	r1, #2
 80003f8:	4808      	ldr	r0, [pc, #32]	@ (800041c <ILI9341_WriteBuffer+0x34>)
 80003fa:	f001 fd33 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80003fe:	2200      	movs	r2, #0
 8000400:	2110      	movs	r1, #16
 8000402:	4807      	ldr	r0, [pc, #28]	@ (8000420 <ILI9341_WriteBuffer+0x38>)
 8000404:	f001 fd2e 	bl	8001e64 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	4619      	mov	r1, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f7ff ff99 	bl	8000344 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010c00 	.word	0x40010c00
 8000420:	40010800 	.word	0x40010800

08000424 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	4604      	mov	r4, r0
 800042c:	4608      	mov	r0, r1
 800042e:	4611      	mov	r1, r2
 8000430:	461a      	mov	r2, r3
 8000432:	4623      	mov	r3, r4
 8000434:	80fb      	strh	r3, [r7, #6]
 8000436:	4603      	mov	r3, r0
 8000438:	80bb      	strh	r3, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	807b      	strh	r3, [r7, #2]
 800043e:	4613      	mov	r3, r2
 8000440:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000442:	88fb      	ldrh	r3, [r7, #6]
 8000444:	0a1b      	lsrs	r3, r3, #8
 8000446:	b29b      	uxth	r3, r3
 8000448:	b2db      	uxtb	r3, r3
 800044a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800044c:	88fb      	ldrh	r3, [r7, #6]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	b29b      	uxth	r3, r3
 8000458:	b2db      	uxtb	r3, r3
 800045a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000462:	202a      	movs	r0, #42	@ 0x2a
 8000464:	f7ff ff88 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	2104      	movs	r1, #4
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffba 	bl	80003e8 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000474:	88bb      	ldrh	r3, [r7, #4]
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	b29b      	uxth	r3, r3
 800047a:	b2db      	uxtb	r3, r3
 800047c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800047e:	88bb      	ldrh	r3, [r7, #4]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000484:	883b      	ldrh	r3, [r7, #0]
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	b29b      	uxth	r3, r3
 800048a:	b2db      	uxtb	r3, r3
 800048c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800048e:	883b      	ldrh	r3, [r7, #0]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000494:	202b      	movs	r0, #43	@ 0x2b
 8000496:	f7ff ff6f 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2104      	movs	r1, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffa1 	bl	80003e8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80004a6:	202c      	movs	r0, #44	@ 0x2c
 80004a8:	f7ff ff66 	bl	8000378 <ILI9341_WriteCommand>
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd90      	pop	{r4, r7, pc}

080004b4 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80004b8:	2200      	movs	r2, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	480c      	ldr	r0, [pc, #48]	@ (80004f0 <ILI9341_Reset+0x3c>)
 80004be:	f001 fcd1 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004c2:	200a      	movs	r0, #10
 80004c4:	f001 f858 	bl	8001578 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <ILI9341_Reset+0x40>)
 80004ce:	f001 fcc9 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004d2:	200a      	movs	r0, #10
 80004d4:	f001 f850 	bl	8001578 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80004d8:	2201      	movs	r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <ILI9341_Reset+0x3c>)
 80004de:	f001 fcc1 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80004e2:	2201      	movs	r2, #1
 80004e4:	2110      	movs	r1, #16
 80004e6:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <ILI9341_Reset+0x40>)
 80004e8:	f001 fcbc 	bl	8001e64 <HAL_GPIO_WritePin>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	40010800 	.word	0x40010800

080004f8 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80004fc:	2201      	movs	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	4802      	ldr	r0, [pc, #8]	@ (800050c <ILI9341_Enable+0x14>)
 8000502:	f001 fcaf 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010c00 	.word	0x40010c00

08000510 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000514:	f7ff fff0 	bl	80004f8 <ILI9341_Enable>
	ILI9341_Reset();
 8000518:	f7ff ffcc 	bl	80004b4 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ff2b 	bl	8000378 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f001 f828 	bl	8001578 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000528:	20cb      	movs	r0, #203	@ 0xcb
 800052a:	f7ff ff25 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800052e:	2039      	movs	r0, #57	@ 0x39
 8000530:	f7ff ff3e 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000534:	202c      	movs	r0, #44	@ 0x2c
 8000536:	f7ff ff3b 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff38 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000540:	2034      	movs	r0, #52	@ 0x34
 8000542:	f7ff ff35 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff ff32 	bl	80003b0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 800054c:	20cf      	movs	r0, #207	@ 0xcf
 800054e:	f7ff ff13 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff2c 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000558:	20c1      	movs	r0, #193	@ 0xc1
 800055a:	f7ff ff29 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800055e:	2030      	movs	r0, #48	@ 0x30
 8000560:	f7ff ff26 	bl	80003b0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000564:	20e8      	movs	r0, #232	@ 0xe8
 8000566:	f7ff ff07 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800056a:	2085      	movs	r0, #133	@ 0x85
 800056c:	f7ff ff20 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ff1d 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000576:	2078      	movs	r0, #120	@ 0x78
 8000578:	f7ff ff1a 	bl	80003b0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 800057c:	20ea      	movs	r0, #234	@ 0xea
 800057e:	f7ff fefb 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff ff14 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff ff11 	bl	80003b0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800058e:	20ed      	movs	r0, #237	@ 0xed
 8000590:	f7ff fef2 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000594:	2064      	movs	r0, #100	@ 0x64
 8000596:	f7ff ff0b 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800059a:	2003      	movs	r0, #3
 800059c:	f7ff ff08 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80005a0:	2012      	movs	r0, #18
 80005a2:	f7ff ff05 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80005a6:	2081      	movs	r0, #129	@ 0x81
 80005a8:	f7ff ff02 	bl	80003b0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80005ac:	20f7      	movs	r0, #247	@ 0xf7
 80005ae:	f7ff fee3 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80005b2:	2020      	movs	r0, #32
 80005b4:	f7ff fefc 	bl	80003b0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80005b8:	20c0      	movs	r0, #192	@ 0xc0
 80005ba:	f7ff fedd 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80005be:	2023      	movs	r0, #35	@ 0x23
 80005c0:	f7ff fef6 	bl	80003b0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80005c4:	20c1      	movs	r0, #193	@ 0xc1
 80005c6:	f7ff fed7 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80005ca:	2010      	movs	r0, #16
 80005cc:	f7ff fef0 	bl	80003b0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80005d0:	20c5      	movs	r0, #197	@ 0xc5
 80005d2:	f7ff fed1 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80005d6:	203e      	movs	r0, #62	@ 0x3e
 80005d8:	f7ff feea 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80005dc:	2028      	movs	r0, #40	@ 0x28
 80005de:	f7ff fee7 	bl	80003b0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80005e2:	20c7      	movs	r0, #199	@ 0xc7
 80005e4:	f7ff fec8 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80005e8:	2086      	movs	r0, #134	@ 0x86
 80005ea:	f7ff fee1 	bl	80003b0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80005ee:	2036      	movs	r0, #54	@ 0x36
 80005f0:	f7ff fec2 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80005f4:	2048      	movs	r0, #72	@ 0x48
 80005f6:	f7ff fedb 	bl	80003b0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80005fa:	203a      	movs	r0, #58	@ 0x3a
 80005fc:	f7ff febc 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000600:	2055      	movs	r0, #85	@ 0x55
 8000602:	f7ff fed5 	bl	80003b0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000606:	20b1      	movs	r0, #177	@ 0xb1
 8000608:	f7ff feb6 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fecf 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000612:	2018      	movs	r0, #24
 8000614:	f7ff fecc 	bl	80003b0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000618:	20b6      	movs	r0, #182	@ 0xb6
 800061a:	f7ff fead 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800061e:	2008      	movs	r0, #8
 8000620:	f7ff fec6 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000624:	2082      	movs	r0, #130	@ 0x82
 8000626:	f7ff fec3 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800062a:	2027      	movs	r0, #39	@ 0x27
 800062c:	f7ff fec0 	bl	80003b0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000630:	20f2      	movs	r0, #242	@ 0xf2
 8000632:	f7ff fea1 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff feba 	bl	80003b0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 800063c:	2026      	movs	r0, #38	@ 0x26
 800063e:	f7ff fe9b 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff feb4 	bl	80003b0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000648:	20e0      	movs	r0, #224	@ 0xe0
 800064a:	f7ff fe95 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800064e:	200f      	movs	r0, #15
 8000650:	f7ff feae 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000654:	2031      	movs	r0, #49	@ 0x31
 8000656:	f7ff feab 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 800065a:	202b      	movs	r0, #43	@ 0x2b
 800065c:	f7ff fea8 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000660:	200c      	movs	r0, #12
 8000662:	f7ff fea5 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000666:	200e      	movs	r0, #14
 8000668:	f7ff fea2 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff fe9f 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000672:	204e      	movs	r0, #78	@ 0x4e
 8000674:	f7ff fe9c 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000678:	20f1      	movs	r0, #241	@ 0xf1
 800067a:	f7ff fe99 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800067e:	2037      	movs	r0, #55	@ 0x37
 8000680:	f7ff fe96 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000684:	2007      	movs	r0, #7
 8000686:	f7ff fe93 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800068a:	2010      	movs	r0, #16
 800068c:	f7ff fe90 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000690:	2003      	movs	r0, #3
 8000692:	f7ff fe8d 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000696:	200e      	movs	r0, #14
 8000698:	f7ff fe8a 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 800069c:	2009      	movs	r0, #9
 800069e:	f7ff fe87 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fe84 	bl	80003b0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80006a8:	20e1      	movs	r0, #225	@ 0xe1
 80006aa:	f7ff fe65 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff fe7e 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80006b4:	200e      	movs	r0, #14
 80006b6:	f7ff fe7b 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80006ba:	2014      	movs	r0, #20
 80006bc:	f7ff fe78 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f7ff fe75 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80006c6:	2011      	movs	r0, #17
 80006c8:	f7ff fe72 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80006cc:	2007      	movs	r0, #7
 80006ce:	f7ff fe6f 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80006d2:	2031      	movs	r0, #49	@ 0x31
 80006d4:	f7ff fe6c 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80006d8:	20c1      	movs	r0, #193	@ 0xc1
 80006da:	f7ff fe69 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80006de:	2048      	movs	r0, #72	@ 0x48
 80006e0:	f7ff fe66 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80006e4:	2008      	movs	r0, #8
 80006e6:	f7ff fe63 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80006ea:	200f      	movs	r0, #15
 80006ec:	f7ff fe60 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80006f0:	200c      	movs	r0, #12
 80006f2:	f7ff fe5d 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80006f6:	2031      	movs	r0, #49	@ 0x31
 80006f8:	f7ff fe5a 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80006fc:	2036      	movs	r0, #54	@ 0x36
 80006fe:	f7ff fe57 	bl	80003b0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000702:	200f      	movs	r0, #15
 8000704:	f7ff fe54 	bl	80003b0 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000708:	2011      	movs	r0, #17
 800070a:	f7ff fe35 	bl	8000378 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	@ 0x64
 8000710:	f000 ff32 	bl	8001578 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000714:	2029      	movs	r0, #41	@ 0x29
 8000716:	f7ff fe2f 	bl	8000378 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f802 	bl	8000724 <ILI9341_SetRotation>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800072e:	2036      	movs	r0, #54	@ 0x36
 8000730:	f7ff fe22 	bl	8000378 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 ff1f 	bl	8001578 <HAL_Delay>

	switch(rotation)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d837      	bhi.n	80007b0 <ILI9341_SetRotation+0x8c>
 8000740:	a201      	add	r2, pc, #4	@ (adr r2, 8000748 <ILI9341_SetRotation+0x24>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000759 	.word	0x08000759
 800074c:	0800076f 	.word	0x0800076f
 8000750:	08000785 	.word	0x08000785
 8000754:	0800079b 	.word	0x0800079b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000758:	2048      	movs	r0, #72	@ 0x48
 800075a:	f7ff fe29 	bl	80003b0 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <ILI9341_SetRotation+0x98>)
 8000760:	22f0      	movs	r2, #240	@ 0xf0
 8000762:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <ILI9341_SetRotation+0x9c>)
 8000766:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800076a:	801a      	strh	r2, [r3, #0]
		break;
 800076c:	e021      	b.n	80007b2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800076e:	2028      	movs	r0, #40	@ 0x28
 8000770:	f7ff fe1e 	bl	80003b0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <ILI9341_SetRotation+0x98>)
 8000776:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800077a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800077c:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <ILI9341_SetRotation+0x9c>)
 800077e:	22f0      	movs	r2, #240	@ 0xf0
 8000780:	801a      	strh	r2, [r3, #0]
		break;
 8000782:	e016      	b.n	80007b2 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000784:	2088      	movs	r0, #136	@ 0x88
 8000786:	f7ff fe13 	bl	80003b0 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <ILI9341_SetRotation+0x98>)
 800078c:	22f0      	movs	r2, #240	@ 0xf0
 800078e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000790:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <ILI9341_SetRotation+0x9c>)
 8000792:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000796:	801a      	strh	r2, [r3, #0]
		break;
 8000798:	e00b      	b.n	80007b2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800079a:	20e8      	movs	r0, #232	@ 0xe8
 800079c:	f7ff fe08 	bl	80003b0 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <ILI9341_SetRotation+0x98>)
 80007a2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007a6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <ILI9341_SetRotation+0x9c>)
 80007aa:	22f0      	movs	r2, #240	@ 0xf0
 80007ac:	801a      	strh	r2, [r3, #0]
		break;
 80007ae:	e000      	b.n	80007b2 <ILI9341_SetRotation+0x8e>
	default:
		break;
 80007b0:	bf00      	nop
	}
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000002 	.word	0x20000002
 80007c0:	20000000 	.word	0x20000000

080007c4 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80007c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007c8:	b08d      	sub	sp, #52	@ 0x34
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	6039      	str	r1, [r7, #0]
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	466b      	mov	r3, sp
 80007d4:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007e2:	d202      	bcs.n	80007ea <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007e8:	e002      	b.n	80007f0 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80007ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2102      	movs	r1, #2
 80007f4:	483e      	ldr	r0, [pc, #248]	@ (80008f0 <ILI9341_DrawColorBurst+0x12c>)
 80007f6:	f001 fb35 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	483d      	ldr	r0, [pc, #244]	@ (80008f4 <ILI9341_DrawColorBurst+0x130>)
 8000800:	f001 fb30 	bl	8001e64 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b29b      	uxth	r3, r3
 800080a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 800080e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000810:	460b      	mov	r3, r1
 8000812:	3b01      	subs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	2300      	movs	r3, #0
 8000818:	4688      	mov	r8, r1
 800081a:	4699      	mov	r9, r3
 800081c:	f04f 0200 	mov.w	r2, #0
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000828:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800082c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000830:	2300      	movs	r3, #0
 8000832:	460c      	mov	r4, r1
 8000834:	461d      	mov	r5, r3
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	00eb      	lsls	r3, r5, #3
 8000840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000844:	00e2      	lsls	r2, r4, #3
 8000846:	1dcb      	adds	r3, r1, #7
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	ebad 0d03 	sub.w	sp, sp, r3
 8000850:	466b      	mov	r3, sp
 8000852:	3300      	adds	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800085a:	e00e      	b.n	800087a <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000860:	4413      	add	r3, r2
 8000862:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000866:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800086a:	3301      	adds	r3, #1
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	b2d1      	uxtb	r1, r2
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000876:	3302      	adds	r3, #2
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800087a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800087e:	429a      	cmp	r2, r3
 8000880:	d3ec      	bcc.n	800085c <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000896:	fbb3 f2f2 	udiv	r2, r3, r2
 800089a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800089c:	fb01 f202 	mul.w	r2, r1, r2
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d010      	beq.n	80008cc <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ae:	e009      	b.n	80008c4 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80008b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	230a      	movs	r3, #10
 80008b6:	69b9      	ldr	r1, [r7, #24]
 80008b8:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <ILI9341_DrawColorBurst+0x134>)
 80008ba:	f001 ffaf 	bl	800281c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80008be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c0:	3301      	adds	r3, #1
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80008c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3f1      	bcc.n	80008b0 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	230a      	movs	r3, #10
 80008d2:	69b9      	ldr	r1, [r7, #24]
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <ILI9341_DrawColorBurst+0x134>)
 80008d6:	f001 ffa1 	bl	800281c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2110      	movs	r1, #16
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <ILI9341_DrawColorBurst+0x130>)
 80008e0:	f001 fac0 	bl	8001e64 <HAL_GPIO_WritePin>
 80008e4:	46b5      	mov	sp, r6
}
 80008e6:	bf00      	nop
 80008e8:	3734      	adds	r7, #52	@ 0x34
 80008ea:	46bd      	mov	sp, r7
 80008ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008f0:	40010c00 	.word	0x40010c00
 80008f4:	40010800 	.word	0x40010800
 80008f8:	20000320 	.word	0x20000320

080008fc <ILI9341_DrawPixel>:
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
}

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
 8000906:	460b      	mov	r3, r1
 8000908:	80bb      	strh	r3, [r7, #4]
 800090a:	4613      	mov	r3, r2
 800090c:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800090e:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <ILI9341_DrawPixel+0xc4>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	429a      	cmp	r2, r3
 8000918:	d24d      	bcs.n	80009b6 <ILI9341_DrawPixel+0xba>
 800091a:	4b2a      	ldr	r3, [pc, #168]	@ (80009c4 <ILI9341_DrawPixel+0xc8>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b29b      	uxth	r3, r3
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	d247      	bcs.n	80009b6 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	753b      	strb	r3, [r7, #20]
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	757b      	strb	r3, [r7, #21]
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	3301      	adds	r3, #1
 800093a:	121b      	asrs	r3, r3, #8
 800093c:	b2db      	uxtb	r3, r3
 800093e:	75bb      	strb	r3, [r7, #22]
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3301      	adds	r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800094a:	88bb      	ldrh	r3, [r7, #4]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b29b      	uxth	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	743b      	strb	r3, [r7, #16]
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	747b      	strb	r3, [r7, #17]
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	3301      	adds	r3, #1
 800095e:	121b      	asrs	r3, r3, #8
 8000960:	b2db      	uxtb	r3, r3
 8000962:	74bb      	strb	r3, [r7, #18]
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800096e:	887b      	ldrh	r3, [r7, #2]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	b29b      	uxth	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	733b      	strb	r3, [r7, #12]
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800097e:	202a      	movs	r0, #42	@ 0x2a
 8000980:	f7ff fcfa 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2104      	movs	r1, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fd2c 	bl	80003e8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000990:	202b      	movs	r0, #43	@ 0x2b
 8000992:	f7ff fcf1 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2104      	movs	r1, #4
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fd23 	bl	80003e8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80009a2:	202c      	movs	r0, #44	@ 0x2c
 80009a4:	f7ff fce8 	bl	8000378 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd1a 	bl	80003e8 <ILI9341_WriteBuffer>
 80009b4:	e000      	b.n	80009b8 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80009b6:	bf00      	nop
}
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000002 	.word	0x20000002
 80009c4:	20000000 	.word	0x20000000

080009c8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	4603      	mov	r3, r0
 80009dc:	80bb      	strh	r3, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	4613      	mov	r3, r2
 80009e4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <ILI9341_DrawRectangle+0xb0>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d23d      	bcs.n	8000a6e <ILI9341_DrawRectangle+0xa6>
 80009f2:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <ILI9341_DrawRectangle+0xb4>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	88ba      	ldrh	r2, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d237      	bcs.n	8000a6e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <ILI9341_DrawRectangle+0xb0>)
 8000a06:	8812      	ldrh	r2, [r2, #0]
 8000a08:	b292      	uxth	r2, r2
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	dd05      	ble.n	8000a1a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <ILI9341_DrawRectangle+0xb0>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <ILI9341_DrawRectangle+0xb4>)
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	b292      	uxth	r2, r2
 8000a26:	4293      	cmp	r3, r2
 8000a28:	dd05      	ble.n	8000a36 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <ILI9341_DrawRectangle+0xb4>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29c      	uxth	r4, r3
 8000a42:	88ba      	ldrh	r2, [r7, #4]
 8000a44:	883b      	ldrh	r3, [r7, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	88b9      	ldrh	r1, [r7, #4]
 8000a50:	88f8      	ldrh	r0, [r7, #6]
 8000a52:	4622      	mov	r2, r4
 8000a54:	f7ff fce6 	bl	8000424 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000a58:	883b      	ldrh	r3, [r7, #0]
 8000a5a:	887a      	ldrh	r2, [r7, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	8b3b      	ldrh	r3, [r7, #24]
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff feac 	bl	80007c4 <ILI9341_DrawColorBurst>
 8000a6c:	e000      	b.n	8000a70 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000a6e:	bf00      	nop
}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000002 	.word	0x20000002
 8000a7c:	20000000 	.word	0x20000000

08000a80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <vApplicationGetIdleTaskMemory+0x28>)
 8000a90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <vApplicationGetIdleTaskMemory+0x2c>)
 8000a96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	20000120 	.word	0x20000120

08000ab0 <UART_SendString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_SendString(char *str)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fb49 	bl	8000150 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <UART_SendString+0x28>)
 8000aca:	f002 fc79 	bl	80033c0 <HAL_UART_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200003bc 	.word	0x200003bc

08000adc <UART_SendBuffer>:

void UART_SendBuffer(const char *format, ...)
{
 8000adc:	b40f      	push	{r0, r1, r2, r3}
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b0a2      	sub	sp, #136	@ 0x88
 8000ae2:	af00      	add	r7, sp, #0
    char buffer[128];  // 출력할 문자열을 저장할 버퍼
    va_list args;
    va_start(args, format);
 8000ae4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ae8:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);  // 문자열 포맷 변환
 8000aea:	f107 0008 	add.w	r0, r7, #8
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	f004 f8ab 	bl	8004c50 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb26 	bl	8000150 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f107 0108 	add.w	r1, r7, #8
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <UART_SendBuffer+0x48>)
 8000b12:	f002 fc55 	bl	80033c0 <HAL_UART_Transmit>
}
 8000b16:	bf00      	nop
 8000b18:	3788      	adds	r7, #136	@ 0x88
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr
 8000b24:	200003bc 	.word	0x200003bc

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b09c      	sub	sp, #112	@ 0x70
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fcf1 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f867 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 f929 	bl	8000d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3a:	f000 f909 	bl	8000d50 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b3e:	f000 f8a7 	bl	8000c90 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b42:	f000 f8db 	bl	8000cfc <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED_R */
  osThreadDef(LED_R, LED_R_Task, osPriorityAboveNormal, 0, 128);
 8000b46:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <main+0xbc>)
 8000b48:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_RHandle = osThreadCreate(osThread(LED_R), NULL);
 8000b5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fe1f 	bl	80037a4 <osThreadCreate>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <main+0xc0>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_Y */
  osThreadDef(LED_Y, LED_Y_Task, osPriorityNormal, 0, 128);
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <main+0xc4>)
 8000b6e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_YHandle = osThreadCreate(osThread(LED_Y), NULL);
 8000b80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fe0c 	bl	80037a4 <osThreadCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <main+0xc8>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_G */
  osThreadDef(LED_G, LED_G_Task, osPriorityBelowNormal, 0, 128);
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <main+0xcc>)
 8000b94:	f107 041c 	add.w	r4, r7, #28
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_GHandle = osThreadCreate(osThread(LED_G), NULL);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fdf9 	bl	80037a4 <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <main+0xd0>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD */
  osThreadDef(LCD, LCD_Task, osPriorityLow, 0, 128);
 8000bb8:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <main+0xd4>)
 8000bba:	463c      	mov	r4, r7
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fde8 	bl	80037a4 <osThreadCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <main+0xd8>)
 8000bd8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bda:	f002 fddc 	bl	8003796 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bde:	bf00      	nop
 8000be0:	e7fd      	b.n	8000bde <main+0xb6>
 8000be2:	bf00      	nop
 8000be4:	08005658 	.word	0x08005658
 8000be8:	20000404 	.word	0x20000404
 8000bec:	0800567c 	.word	0x0800567c
 8000bf0:	20000408 	.word	0x20000408
 8000bf4:	080056a0 	.word	0x080056a0
 8000bf8:	2000040c 	.word	0x2000040c
 8000bfc:	080056c0 	.word	0x080056c0
 8000c00:	20000410 	.word	0x20000410

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	@ 0x40
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2228      	movs	r2, #40	@ 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 f82a 	bl	8004c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c42:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 f921 	bl	8001e94 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c58:	f000 fa6a 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fb8e 	bl	8002398 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c82:	f000 fa55 	bl	8001130 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3740      	adds	r7, #64	@ 0x40
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000c96:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <MX_SPI1_Init+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000cdc:	220a      	movs	r2, #10
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_SPI1_Init+0x64>)
 8000ce2:	f001 fd17 	bl	8002714 <HAL_SPI_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cec:	f000 fa20 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000320 	.word	0x20000320
 8000cf8:	40013000 	.word	0x40013000

08000cfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_USART2_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d34:	f002 faf4 	bl	8003320 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f9f7 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200003bc 	.word	0x200003bc
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_DMA_Init+0x38>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <MX_DMA_Init+0x38>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_DMA_Init+0x38>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2105      	movs	r1, #5
 8000d72:	200d      	movs	r0, #13
 8000d74:	f000 fcd9 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d78:	200d      	movs	r0, #13
 8000d7a:	f000 fcf2 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a59      	ldr	r2, [pc, #356]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b57      	ldr	r3, [pc, #348]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b54      	ldr	r3, [pc, #336]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a53      	ldr	r2, [pc, #332]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b51      	ldr	r3, [pc, #324]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0320 	and.w	r3, r3, #32
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b48      	ldr	r3, [pc, #288]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a47      	ldr	r2, [pc, #284]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b45      	ldr	r3, [pc, #276]	@ (8000f0c <MX_GPIO_Init+0x180>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e06:	4842      	ldr	r0, [pc, #264]	@ (8000f10 <MX_GPIO_Init+0x184>)
 8000e08:	f001 f82c 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2110      	movs	r1, #16
 8000e10:	4840      	ldr	r0, [pc, #256]	@ (8000f14 <MX_GPIO_Init+0x188>)
 8000e12:	f001 f827 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2103      	movs	r1, #3
 8000e1a:	483f      	ldr	r0, [pc, #252]	@ (8000f18 <MX_GPIO_Init+0x18c>)
 8000e1c:	f001 f822 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_Y_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000e26:	483b      	ldr	r0, [pc, #236]	@ (8000f14 <MX_GPIO_Init+0x188>)
 8000e28:	f001 f81c 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2140      	movs	r1, #64	@ 0x40
 8000e30:	4839      	ldr	r0, [pc, #228]	@ (8000f18 <MX_GPIO_Init+0x18c>)
 8000e32:	f001 f817 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4830      	ldr	r0, [pc, #192]	@ (8000f10 <MX_GPIO_Init+0x184>)
 8000e50:	f000 fe84 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000e54:	2310      	movs	r3, #16
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482a      	ldr	r0, [pc, #168]	@ (8000f14 <MX_GPIO_Init+0x188>)
 8000e6c:	f000 fe76 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 8000e70:	2303      	movs	r3, #3
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4824      	ldr	r0, [pc, #144]	@ (8000f18 <MX_GPIO_Init+0x18c>)
 8000e88:	f000 fe68 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <MX_GPIO_Init+0x184>)
 8000ea0:	f000 fe5c 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_Y_Pin;
 8000ea4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <MX_GPIO_Init+0x188>)
 8000ebe:	f000 fe4d 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000ec2:	2340      	movs	r3, #64	@ 0x40
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480f      	ldr	r0, [pc, #60]	@ (8000f18 <MX_GPIO_Init+0x18c>)
 8000eda:	f000 fe3f 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_GPIO_Init+0x190>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <MX_GPIO_Init+0x190>)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	@ 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010800 	.word	0x40010800
 8000f18:	40010c00 	.word	0x40010c00
 8000f1c:	40010000 	.word	0x40010000

08000f20 <LED_R_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LED_R_Task */
void LED_R_Task(void const * argument)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <LED_R_Task+0x60>)
 8000f30:	f000 ff98 	bl	8001e64 <HAL_GPIO_WritePin>
	    UART_SendString("LED_R _ON\r\n");
 8000f34:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <LED_R_Task+0x64>)
 8000f36:	f7ff fdbb 	bl	8000ab0 <UART_SendString>

	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e005      	b.n	8000f4c <LED_R_Task+0x2c>
	    {
	        osDelay(3);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f002 fc7b 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	ddf6      	ble.n	8000f40 <LED_R_Task+0x20>
	    }

	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <LED_R_Task+0x60>)
 8000f5a:	f000 ff83 	bl	8001e64 <HAL_GPIO_WritePin>
	    UART_SendString("LED_R OFF\r\n");
 8000f5e:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <LED_R_Task+0x68>)
 8000f60:	f7ff fda6 	bl	8000ab0 <UART_SendString>

	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	e005      	b.n	8000f76 <LED_R_Task+0x56>
	    {
	        osDelay(7);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f002 fc66 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	ddf6      	ble.n	8000f6a <LED_R_Task+0x4a>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000f7c:	e7d4      	b.n	8000f28 <LED_R_Task+0x8>
 8000f7e:	bf00      	nop
 8000f80:	40010800 	.word	0x40010800
 8000f84:	080056dc 	.word	0x080056dc
 8000f88:	080056e8 	.word	0x080056e8

08000f8c <LED_Y_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Y_Task */
void LED_Y_Task(void const * argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Y_Task */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9a:	4814      	ldr	r0, [pc, #80]	@ (8000fec <LED_Y_Task+0x60>)
 8000f9c:	f000 ff62 	bl	8001e64 <HAL_GPIO_WritePin>
	    UART_SendString("LED_Y _ON\r\n");
 8000fa0:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <LED_Y_Task+0x64>)
 8000fa2:	f7ff fd85 	bl	8000ab0 <UART_SendString>

	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e005      	b.n	8000fb8 <LED_Y_Task+0x2c>
	    {
	        osDelay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f002 fc45 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	ddf6      	ble.n	8000fac <LED_Y_Task+0x20>
	    }

	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <LED_Y_Task+0x60>)
 8000fc6:	f000 ff4d 	bl	8001e64 <HAL_GPIO_WritePin>
	    UART_SendString("LED_Y OFF\r\n");
 8000fca:	480a      	ldr	r0, [pc, #40]	@ (8000ff4 <LED_Y_Task+0x68>)
 8000fcc:	f7ff fd70 	bl	8000ab0 <UART_SendString>

	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	e005      	b.n	8000fe2 <LED_Y_Task+0x56>
	    {
	        osDelay(5);
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f002 fc30 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	ddf6      	ble.n	8000fd6 <LED_Y_Task+0x4a>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000fe8:	e7d4      	b.n	8000f94 <LED_Y_Task+0x8>
 8000fea:	bf00      	nop
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	080056f4 	.word	0x080056f4
 8000ff4:	08005700 	.word	0x08005700

08000ff8 <LED_G_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_G_Task */
void LED_G_Task(void const * argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_G_Task */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2140      	movs	r1, #64	@ 0x40
 8001004:	4813      	ldr	r0, [pc, #76]	@ (8001054 <LED_G_Task+0x5c>)
 8001006:	f000 ff2d 	bl	8001e64 <HAL_GPIO_WritePin>
	    UART_SendString("LED_G _ON\r\n");
 800100a:	4813      	ldr	r0, [pc, #76]	@ (8001058 <LED_G_Task+0x60>)
 800100c:	f7ff fd50 	bl	8000ab0 <UART_SendString>

	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e005      	b.n	8001022 <LED_G_Task+0x2a>
	    {
	        osDelay(8);
 8001016:	2008      	movs	r0, #8
 8001018:	f002 fc10 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b09      	cmp	r3, #9
 8001026:	ddf6      	ble.n	8001016 <LED_G_Task+0x1e>
	    }

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2140      	movs	r1, #64	@ 0x40
 800102c:	4809      	ldr	r0, [pc, #36]	@ (8001054 <LED_G_Task+0x5c>)
 800102e:	f000 ff19 	bl	8001e64 <HAL_GPIO_WritePin>
	    UART_SendString("LED_G OFF\r\n");
 8001032:	480a      	ldr	r0, [pc, #40]	@ (800105c <LED_G_Task+0x64>)
 8001034:	f7ff fd3c 	bl	8000ab0 <UART_SendString>

	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	e005      	b.n	800104a <LED_G_Task+0x52>
	    {
	        osDelay(2);
 800103e:	2002      	movs	r0, #2
 8001040:	f002 fbfc 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b09      	cmp	r3, #9
 800104e:	ddf6      	ble.n	800103e <LED_G_Task+0x46>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001050:	e7d6      	b.n	8001000 <LED_G_Task+0x8>
 8001052:	bf00      	nop
 8001054:	40010c00 	.word	0x40010c00
 8001058:	0800570c 	.word	0x0800570c
 800105c:	08005718 	.word	0x08005718

08001060 <LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD_Task */
void LCD_Task(void const * argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Task */
	ILI9341_Init();
 8001068:	f7ff fa52 	bl	8000510 <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fb59 	bl	8000724 <ILI9341_SetRotation>
//	ILI9341_FillScreen(BLACK);

	static char BufferNum[30];
	ILI9341_DrawText("HELLO, WORLD!", FONT3, 10, 110, WHITE, BLACK);
 8001072:	2300      	movs	r3, #0
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	236e      	movs	r3, #110	@ 0x6e
 800107e:	220a      	movs	r2, #10
 8001080:	491c      	ldr	r1, [pc, #112]	@ (80010f4 <LCD_Task+0x94>)
 8001082:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <LCD_Task+0x98>)
 8001084:	f7ff f8e4 	bl	8000250 <ILI9341_DrawText>
	ILI9341_DrawText("MY NAME IS KIYUN!", FONT3, 10, 130, WHITE, BLACK);
 8001088:	2300      	movs	r3, #0
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2382      	movs	r3, #130	@ 0x82
 8001094:	220a      	movs	r2, #10
 8001096:	4917      	ldr	r1, [pc, #92]	@ (80010f4 <LCD_Task+0x94>)
 8001098:	4818      	ldr	r0, [pc, #96]	@ (80010fc <LCD_Task+0x9c>)
 800109a:	f7ff f8d9 	bl	8000250 <ILI9341_DrawText>
	ILI9341_DrawText("COUNT: ", FONT3, 10, 150, WHITE, BLACK);
 800109e:	2300      	movs	r3, #0
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2396      	movs	r3, #150	@ 0x96
 80010aa:	220a      	movs	r2, #10
 80010ac:	4911      	ldr	r1, [pc, #68]	@ (80010f4 <LCD_Task+0x94>)
 80010ae:	4814      	ldr	r0, [pc, #80]	@ (8001100 <LCD_Task+0xa0>)
 80010b0:	f7ff f8ce 	bl	8000250 <ILI9341_DrawText>

	/* Infinite loop */
	for(;;)
	{
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e018      	b.n	80010ec <LCD_Task+0x8c>
	    {
	    	sprintf(BufferNum, "%d", i);
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4911      	ldr	r1, [pc, #68]	@ (8001104 <LCD_Task+0xa4>)
 80010be:	4812      	ldr	r0, [pc, #72]	@ (8001108 <LCD_Task+0xa8>)
 80010c0:	f003 fd7a 	bl	8004bb8 <siprintf>
	    	UART_SendBuffer(BufferNum);
 80010c4:	4810      	ldr	r0, [pc, #64]	@ (8001108 <LCD_Task+0xa8>)
 80010c6:	f7ff fd09 	bl	8000adc <UART_SendBuffer>
		 	ILI9341_DrawText(BufferNum, FONT3, 75, 150, WHITE, BLACK);
 80010ca:	2300      	movs	r3, #0
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2396      	movs	r3, #150	@ 0x96
 80010d6:	224b      	movs	r2, #75	@ 0x4b
 80010d8:	4906      	ldr	r1, [pc, #24]	@ (80010f4 <LCD_Task+0x94>)
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <LCD_Task+0xa8>)
 80010dc:	f7ff f8b8 	bl	8000250 <ILI9341_DrawText>
	      osDelay(5);
 80010e0:	2005      	movs	r0, #5
 80010e2:	f002 fbab 	bl	800383c <osDelay>
	    for (int i = 0; i < 10; i++)  // 50ms 단위로 끊어서 실행
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b09      	cmp	r3, #9
 80010f0:	dde3      	ble.n	80010ba <LCD_Task+0x5a>
 80010f2:	e7df      	b.n	80010b4 <LCD_Task+0x54>
 80010f4:	0800575c 	.word	0x0800575c
 80010f8:	08005724 	.word	0x08005724
 80010fc:	08005734 	.word	0x08005734
 8001100:	08005748 	.word	0x08005748
 8001104:	08005750 	.word	0x08005750
 8001108:	20000414 	.word	0x20000414

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f000 fa0f 	bl	8001540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012c00 	.word	0x40012c00

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <Error_Handler+0x8>

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_MspInit+0x68>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_MspInit+0x68>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_MspInit+0x68>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_MspInit+0x68>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <HAL_MspInit+0x68>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_MspInit+0x68>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	210f      	movs	r1, #15
 8001176:	f06f 0001 	mvn.w	r0, #1
 800117a:	f000 fad6 	bl	800172a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_MspInit+0x6c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_MspInit+0x6c>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a28      	ldr	r2, [pc, #160]	@ (8001268 <HAL_SPI_MspInit+0xbc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d149      	bne.n	8001260 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <HAL_SPI_MspInit+0xc0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a26      	ldr	r2, [pc, #152]	@ (800126c <HAL_SPI_MspInit+0xc0>)
 80011d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_SPI_MspInit+0xc0>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <HAL_SPI_MspInit+0xc0>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a20      	ldr	r2, [pc, #128]	@ (800126c <HAL_SPI_MspInit+0xc0>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <HAL_SPI_MspInit+0xc0>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011fc:	23a0      	movs	r3, #160	@ 0xa0
 80011fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	4818      	ldr	r0, [pc, #96]	@ (8001270 <HAL_SPI_MspInit+0xc4>)
 8001210:	f000 fca4 	bl	8001b5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001216:	4a18      	ldr	r2, [pc, #96]	@ (8001278 <HAL_SPI_MspInit+0xcc>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 800121c:	2210      	movs	r2, #16
 800121e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001246:	f000 fa9b 	bl	8001780 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001250:	f7ff ff6e 	bl	8001130 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 8001258:	649a      	str	r2, [r3, #72]	@ 0x48
 800125a:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <HAL_SPI_MspInit+0xc8>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013000 	.word	0x40013000
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	20000378 	.word	0x20000378
 8001278:	40020030 	.word	0x40020030

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <HAL_UART_MspInit+0x88>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d12f      	bne.n	80012fc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_UART_MspInit+0x8c>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_UART_MspInit+0x8c>)
 80012a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a6:	61d3      	str	r3, [r2, #28]
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_UART_MspInit+0x8c>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_UART_MspInit+0x8c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <HAL_UART_MspInit+0x8c>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <HAL_UART_MspInit+0x8c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012cc:	2304      	movs	r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	480b      	ldr	r0, [pc, #44]	@ (800130c <HAL_UART_MspInit+0x90>)
 80012e0:	f000 fc3c 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e4:	2308      	movs	r3, #8
 80012e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <HAL_UART_MspInit+0x90>)
 80012f8:	f000 fc30 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40004400 	.word	0x40004400
 8001308:	40021000 	.word	0x40021000
 800130c:	40010800 	.word	0x40010800

08001310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	@ 0x30
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <HAL_InitTick+0xd0>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <HAL_InitTick+0xd0>)
 800132c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001330:	6193      	str	r3, [r2, #24]
 8001332:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <HAL_InitTick+0xd0>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133e:	f107 020c 	add.w	r2, r7, #12
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f001 f995 	bl	8002678 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800134e:	f001 f97f 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 8001352:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001356:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0c9b      	lsrs	r3, r3, #18
 800135e:	3b01      	subs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <HAL_InitTick+0xd8>)
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <HAL_InitTick+0xdc>)
 8001366:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_InitTick+0xd8>)
 800136a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800136e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001370:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <HAL_InitTick+0xd8>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <HAL_InitTick+0xd8>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <HAL_InitTick+0xd8>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_InitTick+0xd8>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001388:	4817      	ldr	r0, [pc, #92]	@ (80013e8 <HAL_InitTick+0xd8>)
 800138a:	f001 fd8a 	bl	8002ea2 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001394:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11b      	bne.n	80013d4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800139c:	4812      	ldr	r0, [pc, #72]	@ (80013e8 <HAL_InitTick+0xd8>)
 800139e:	f001 fdd9 	bl	8002f54 <HAL_TIM_Base_Start_IT>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013b0:	2019      	movs	r0, #25
 80013b2:	f000 f9d6 	bl	8001762 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d808      	bhi.n	80013ce <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	2019      	movs	r0, #25
 80013c2:	f000 f9b2 	bl	800172a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_InitTick+0xe0>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e002      	b.n	80013d4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3730      	adds	r7, #48	@ 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	20000434 	.word	0x20000434
 80013ec:	40012c00 	.word	0x40012c00
 80013f0:	20000008 	.word	0x20000008

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <NMI_Handler+0x4>

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <MemManage_Handler+0x4>

0800140c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <UsageFault_Handler+0x4>

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <DMA1_Channel3_IRQHandler+0x10>)
 800142e:	f000 fa61 	bl	80018f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000378 	.word	0x20000378

0800143c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM1_UP_IRQHandler+0x10>)
 8001442:	f001 fdd9 	bl	8002ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000434 	.word	0x20000434

08001450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001458:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <_sbrk+0x5c>)
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <_sbrk+0x60>)
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001464:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <_sbrk+0x64>)
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <_sbrk+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	d207      	bcs.n	8001490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001480:	f003 fc52 	bl	8004d28 <__errno>
 8001484:	4603      	mov	r3, r0
 8001486:	220c      	movs	r2, #12
 8001488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800148e:	e009      	b.n	80014a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <_sbrk+0x64>)
 80014a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20005000 	.word	0x20005000
 80014b0:	00000400 	.word	0x00000400
 80014b4:	2000047c 	.word	0x2000047c
 80014b8:	20001320 	.word	0x20001320

080014bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c8:	f7ff fff8 	bl	80014bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480b      	ldr	r0, [pc, #44]	@ (80014fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ce:	490c      	ldr	r1, [pc, #48]	@ (8001500 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e4:	4c09      	ldr	r4, [pc, #36]	@ (800150c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f2:	f003 fc1f 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f6:	f7ff fb17 	bl	8000b28 <main>
  bx lr
 80014fa:	4770      	bx	lr
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001504:	08006130 	.word	0x08006130
  ldr r2, =_sbss
 8001508:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800150c:	20001320 	.word	0x20001320

08001510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_2_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_Init+0x28>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_Init+0x28>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f8f5 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	200f      	movs	r0, #15
 800152c:	f7ff fef0 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fe04 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a03      	ldr	r2, [pc, #12]	@ (8001560 <HAL_IncTick+0x20>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	2000000c 	.word	0x2000000c
 8001560:	20000480 	.word	0x20000480

08001564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	@ (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000480 	.word	0x20000480

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4906      	ldr	r1, [pc, #24]	@ (8001658 <__NVIC_EnableIRQ+0x34>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	@ (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff4f 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff64 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ffb2 	bl	80016b0 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff81 	bl	800165c <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff57 	bl	8001624 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e043      	b.n	800181e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <HAL_DMA_Init+0xa8>)
 800179e:	4413      	add	r3, r2
 80017a0:	4a22      	ldr	r2, [pc, #136]	@ (800182c <HAL_DMA_Init+0xac>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	009a      	lsls	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <HAL_DMA_Init+0xb0>)
 80017b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80017ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	bffdfff8 	.word	0xbffdfff8
 800182c:	cccccccd 	.word	0xcccccccd
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_DMA_Start_IT+0x20>
 8001850:	2302      	movs	r3, #2
 8001852:	e04b      	b.n	80018ec <HAL_DMA_Start_IT+0xb8>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d13a      	bne.n	80018de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f937 	bl	8001b00 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 020e 	orr.w	r2, r2, #14
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e00f      	b.n	80018cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0204 	bic.w	r2, r2, #4
 80018ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 020a 	orr.w	r2, r2, #10
 80018ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e005      	b.n	80018ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018e6:	2302      	movs	r3, #2
 80018e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	2204      	movs	r2, #4
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d04f      	beq.n	80019bc <HAL_DMA_IRQHandler+0xc8>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d04a      	beq.n	80019bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0204 	bic.w	r2, r2, #4
 8001942:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a66      	ldr	r2, [pc, #408]	@ (8001ae4 <HAL_DMA_IRQHandler+0x1f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d029      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xae>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a65      	ldr	r2, [pc, #404]	@ (8001ae8 <HAL_DMA_IRQHandler+0x1f4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d022      	beq.n	800199e <HAL_DMA_IRQHandler+0xaa>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a63      	ldr	r2, [pc, #396]	@ (8001aec <HAL_DMA_IRQHandler+0x1f8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01a      	beq.n	8001998 <HAL_DMA_IRQHandler+0xa4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a62      	ldr	r2, [pc, #392]	@ (8001af0 <HAL_DMA_IRQHandler+0x1fc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d012      	beq.n	8001992 <HAL_DMA_IRQHandler+0x9e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a60      	ldr	r2, [pc, #384]	@ (8001af4 <HAL_DMA_IRQHandler+0x200>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00a      	beq.n	800198c <HAL_DMA_IRQHandler+0x98>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5f      	ldr	r2, [pc, #380]	@ (8001af8 <HAL_DMA_IRQHandler+0x204>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d102      	bne.n	8001986 <HAL_DMA_IRQHandler+0x92>
 8001980:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001984:	e00e      	b.n	80019a4 <HAL_DMA_IRQHandler+0xb0>
 8001986:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800198a:	e00b      	b.n	80019a4 <HAL_DMA_IRQHandler+0xb0>
 800198c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001990:	e008      	b.n	80019a4 <HAL_DMA_IRQHandler+0xb0>
 8001992:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001996:	e005      	b.n	80019a4 <HAL_DMA_IRQHandler+0xb0>
 8001998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800199c:	e002      	b.n	80019a4 <HAL_DMA_IRQHandler+0xb0>
 800199e:	2340      	movs	r3, #64	@ 0x40
 80019a0:	e000      	b.n	80019a4 <HAL_DMA_IRQHandler+0xb0>
 80019a2:	2304      	movs	r3, #4
 80019a4:	4a55      	ldr	r2, [pc, #340]	@ (8001afc <HAL_DMA_IRQHandler+0x208>)
 80019a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8094 	beq.w	8001ada <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019ba:	e08e      	b.n	8001ada <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	2202      	movs	r2, #2
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d056      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x186>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d051      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10b      	bne.n	80019fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 020a 	bic.w	r2, r2, #10
 80019f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a38      	ldr	r2, [pc, #224]	@ (8001ae4 <HAL_DMA_IRQHandler+0x1f0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d029      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x166>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <HAL_DMA_IRQHandler+0x1f4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d022      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x162>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a35      	ldr	r2, [pc, #212]	@ (8001aec <HAL_DMA_IRQHandler+0x1f8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01a      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x15c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a34      	ldr	r2, [pc, #208]	@ (8001af0 <HAL_DMA_IRQHandler+0x1fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d012      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x156>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a32      	ldr	r2, [pc, #200]	@ (8001af4 <HAL_DMA_IRQHandler+0x200>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00a      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x150>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a31      	ldr	r2, [pc, #196]	@ (8001af8 <HAL_DMA_IRQHandler+0x204>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d102      	bne.n	8001a3e <HAL_DMA_IRQHandler+0x14a>
 8001a38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a3c:	e00e      	b.n	8001a5c <HAL_DMA_IRQHandler+0x168>
 8001a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a42:	e00b      	b.n	8001a5c <HAL_DMA_IRQHandler+0x168>
 8001a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a48:	e008      	b.n	8001a5c <HAL_DMA_IRQHandler+0x168>
 8001a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4e:	e005      	b.n	8001a5c <HAL_DMA_IRQHandler+0x168>
 8001a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a54:	e002      	b.n	8001a5c <HAL_DMA_IRQHandler+0x168>
 8001a56:	2320      	movs	r3, #32
 8001a58:	e000      	b.n	8001a5c <HAL_DMA_IRQHandler+0x168>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_DMA_IRQHandler+0x208>)
 8001a5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d034      	beq.n	8001ada <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a78:	e02f      	b.n	8001ada <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	2208      	movs	r2, #8
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d028      	beq.n	8001adc <HAL_DMA_IRQHandler+0x1e8>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020e 	bic.w	r2, r2, #14
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
    }
  }
  return;
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
}
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40020008 	.word	0x40020008
 8001ae8:	4002001c 	.word	0x4002001c
 8001aec:	40020030 	.word	0x40020030
 8001af0:	40020044 	.word	0x40020044
 8001af4:	40020058 	.word	0x40020058
 8001af8:	4002006c 	.word	0x4002006c
 8001afc:	40020000 	.word	0x40020000

08001b00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d108      	bne.n	8001b40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b3e:	e007      	b.n	8001b50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b08b      	sub	sp, #44	@ 0x2c
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e169      	b.n	8001e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b70:	2201      	movs	r2, #1
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8158 	bne.w	8001e3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a9a      	ldr	r2, [pc, #616]	@ (8001dfc <HAL_GPIO_Init+0x2a0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d05e      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001b98:	4a98      	ldr	r2, [pc, #608]	@ (8001dfc <HAL_GPIO_Init+0x2a0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d875      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001b9e:	4a98      	ldr	r2, [pc, #608]	@ (8001e00 <HAL_GPIO_Init+0x2a4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d058      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a96      	ldr	r2, [pc, #600]	@ (8001e00 <HAL_GPIO_Init+0x2a4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d86f      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001baa:	4a96      	ldr	r2, [pc, #600]	@ (8001e04 <HAL_GPIO_Init+0x2a8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d052      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001bb0:	4a94      	ldr	r2, [pc, #592]	@ (8001e04 <HAL_GPIO_Init+0x2a8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d869      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bb6:	4a94      	ldr	r2, [pc, #592]	@ (8001e08 <HAL_GPIO_Init+0x2ac>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d04c      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001bbc:	4a92      	ldr	r2, [pc, #584]	@ (8001e08 <HAL_GPIO_Init+0x2ac>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d863      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bc2:	4a92      	ldr	r2, [pc, #584]	@ (8001e0c <HAL_GPIO_Init+0x2b0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d046      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001bc8:	4a90      	ldr	r2, [pc, #576]	@ (8001e0c <HAL_GPIO_Init+0x2b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d85d      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d82a      	bhi.n	8001c28 <HAL_GPIO_Init+0xcc>
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d859      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <HAL_GPIO_Init+0x80>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c57 	.word	0x08001c57
 8001be0:	08001c31 	.word	0x08001c31
 8001be4:	08001c43 	.word	0x08001c43
 8001be8:	08001c85 	.word	0x08001c85
 8001bec:	08001c8b 	.word	0x08001c8b
 8001bf0:	08001c8b 	.word	0x08001c8b
 8001bf4:	08001c8b 	.word	0x08001c8b
 8001bf8:	08001c8b 	.word	0x08001c8b
 8001bfc:	08001c8b 	.word	0x08001c8b
 8001c00:	08001c8b 	.word	0x08001c8b
 8001c04:	08001c8b 	.word	0x08001c8b
 8001c08:	08001c8b 	.word	0x08001c8b
 8001c0c:	08001c8b 	.word	0x08001c8b
 8001c10:	08001c8b 	.word	0x08001c8b
 8001c14:	08001c8b 	.word	0x08001c8b
 8001c18:	08001c8b 	.word	0x08001c8b
 8001c1c:	08001c8b 	.word	0x08001c8b
 8001c20:	08001c39 	.word	0x08001c39
 8001c24:	08001c4d 	.word	0x08001c4d
 8001c28:	4a79      	ldr	r2, [pc, #484]	@ (8001e10 <HAL_GPIO_Init+0x2b4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2e:	e02c      	b.n	8001c8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	623b      	str	r3, [r7, #32]
          break;
 8001c36:	e029      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	623b      	str	r3, [r7, #32]
          break;
 8001c40:	e024      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	3308      	adds	r3, #8
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e01f      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	330c      	adds	r3, #12
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e01a      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e013      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	611a      	str	r2, [r3, #16]
          break;
 8001c76:	e009      	b.n	8001c8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	615a      	str	r2, [r3, #20]
          break;
 8001c82:	e003      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          break;
 8001c8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	@ 0xff
 8001c90:	d801      	bhi.n	8001c96 <HAL_GPIO_Init+0x13a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	e001      	b.n	8001c9a <HAL_GPIO_Init+0x13e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ca0:	d802      	bhi.n	8001ca8 <HAL_GPIO_Init+0x14c>
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x152>
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	3b08      	subs	r3, #8
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	210f      	movs	r1, #15
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	6a39      	ldr	r1, [r7, #32]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80b1 	beq.w	8001e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <HAL_GPIO_Init+0x2b8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e14 <HAL_GPIO_Init+0x2b8>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <HAL_GPIO_Init+0x2b8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf4:	4a48      	ldr	r2, [pc, #288]	@ (8001e18 <HAL_GPIO_Init+0x2bc>)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <HAL_GPIO_Init+0x2c0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_GPIO_Init+0x1ec>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3f      	ldr	r2, [pc, #252]	@ (8001e20 <HAL_GPIO_Init+0x2c4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1e8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e24 <HAL_GPIO_Init+0x2c8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1e4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3d      	ldr	r2, [pc, #244]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1e0>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e006      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e004      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e002      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4c:	f002 0203 	and.w	r2, r2, #3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4093      	lsls	r3, r2
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d5a:	492f      	ldr	r1, [pc, #188]	@ (8001e18 <HAL_GPIO_Init+0x2bc>)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d74:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	492c      	ldr	r1, [pc, #176]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4928      	ldr	r1, [pc, #160]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d9c:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4922      	ldr	r1, [pc, #136]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	491e      	ldr	r1, [pc, #120]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4918      	ldr	r1, [pc, #96]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4914      	ldr	r1, [pc, #80]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d021      	beq.n	8001e30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	490e      	ldr	r1, [pc, #56]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e021      	b.n	8001e3e <HAL_GPIO_Init+0x2e2>
 8001dfa:	bf00      	nop
 8001dfc:	10320000 	.word	0x10320000
 8001e00:	10310000 	.word	0x10310000
 8001e04:	10220000 	.word	0x10220000
 8001e08:	10210000 	.word	0x10210000
 8001e0c:	10120000 	.word	0x10120000
 8001e10:	10110000 	.word	0x10110000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	40010c00 	.word	0x40010c00
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40011400 	.word	0x40011400
 8001e2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4909      	ldr	r1, [pc, #36]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	3301      	adds	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f47f ae8e 	bne.w	8001b70 <HAL_GPIO_Init+0x14>
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	372c      	adds	r7, #44	@ 0x2c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e272      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8087 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4b89      	ldr	r3, [pc, #548]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d168      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e24c      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x76>
 8001efc:	4b80      	ldr	r3, [pc, #512]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7f      	ldr	r2, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b7b      	ldr	r3, [pc, #492]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7a      	ldr	r2, [pc, #488]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b78      	ldr	r3, [pc, #480]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a77      	ldr	r2, [pc, #476]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xbc>
 8001f36:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a71      	ldr	r2, [pc, #452]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f50:	4b6b      	ldr	r3, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6a      	ldr	r2, [pc, #424]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a67      	ldr	r2, [pc, #412]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff faf8 	bl	8001564 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff faf4 	bl	8001564 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	@ 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e200      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe4>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fae4 	bl	8001564 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fae0 	bl	8001564 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	@ 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1ec      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fda:	4b49      	ldr	r3, [pc, #292]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
 8001fe6:	4b46      	ldr	r3, [pc, #280]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c0      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4939      	ldr	r1, [pc, #228]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_OscConfig+0x270>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fa99 	bl	8001564 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff fa95 	bl	8001564 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b2a      	ldr	r3, [pc, #168]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4927      	ldr	r1, [pc, #156]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <HAL_RCC_OscConfig+0x270>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fa78 	bl	8001564 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fa74 	bl	8001564 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e180      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03a      	beq.n	8002118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fa58 	bl	8001564 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fa54 	bl	8001564 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e160      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 fafe 	bl	80026d8 <RCC_Delay>
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <HAL_RCC_OscConfig+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff fa3e 	bl	8001564 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff fa3a 	bl	8001564 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e146      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	42420000 	.word	0x42420000
 8002108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a6 	beq.w	8002272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b8b      	ldr	r3, [pc, #556]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a87      	ldr	r2, [pc, #540]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b85      	ldr	r3, [pc, #532]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b82      	ldr	r3, [pc, #520]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7e      	ldr	r2, [pc, #504]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7ff f9fb 	bl	8001564 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7ff f9f7 	bl	8001564 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	@ 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e103      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b75      	ldr	r3, [pc, #468]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x312>
 8002198:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e02d      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x334>
 80021ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a69      	ldr	r2, [pc, #420]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b67      	ldr	r3, [pc, #412]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a66      	ldr	r2, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	e01c      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x356>
 80021d0:	4b61      	ldr	r3, [pc, #388]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a60      	ldr	r2, [pc, #384]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b58      	ldr	r3, [pc, #352]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a57      	ldr	r2, [pc, #348]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff f9ab 	bl	8001564 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff f9a7 	bl	8001564 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0b1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b4b      	ldr	r3, [pc, #300]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCC_OscConfig+0x37e>
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff f995 	bl	8001564 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f991 	bl	8001564 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e09b      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b3c      	ldr	r3, [pc, #240]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a3b      	ldr	r2, [pc, #236]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227c:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d061      	beq.n	800234c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d146      	bne.n	800231e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff f965 	bl	8001564 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff f961 	bl	8001564 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e06d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4921      	ldr	r1, [pc, #132]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a19      	ldr	r1, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	430b      	orrs	r3, r1
 80022ea:	491b      	ldr	r1, [pc, #108]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff f935 	bl	8001564 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff f931 	bl	8001564 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x46a>
 800231c:	e035      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff f91e 	bl	8001564 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f91a 	bl	8001564 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e026      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x498>
 800234a:	e01e      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e019      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_RCC_OscConfig+0x500>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0d0      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4965      	ldr	r1, [pc, #404]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d115      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b41      	ldr	r3, [pc, #260]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e073      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06b      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b39      	ldr	r3, [pc, #228]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4936      	ldr	r1, [pc, #216]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff f86c 	bl	8001564 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff f868 	bl	8001564 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e053      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d210      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4922      	ldr	r1, [pc, #136]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	@ (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1cc>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_ClockConfig+0x1d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fee2 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	080060c0 	.word	0x080060c0
 8002564:	20000004 	.word	0x20000004
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002586:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x94>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x30>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x36>
 800259a:	e027      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e027      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d010      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x94>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0c5b      	lsrs	r3, r3, #17
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ce:	fb03 f202 	mul.w	r2, r3, r2
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e004      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0c      	ldr	r2, [pc, #48]	@ (8002610 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	613b      	str	r3, [r7, #16]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ee:	613b      	str	r3, [r7, #16]
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	693b      	ldr	r3, [r7, #16]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	007a1200 	.word	0x007a1200
 8002608:	080060d8 	.word	0x080060d8
 800260c:	080060e8 	.word	0x080060e8
 8002610:	003d0900 	.word	0x003d0900

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b02      	ldr	r3, [pc, #8]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	080060d0 	.word	0x080060d0

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002654:	f7ff ffde 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	080060d0 	.word	0x080060d0

08002678 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	220f      	movs	r2, #15
 8002686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_GetClockConfig+0x58>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_RCC_GetClockConfig+0x58>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_GetClockConfig+0x58>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026ac:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_RCC_GetClockConfig+0x58>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_GetClockConfig+0x5c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0207 	and.w	r2, r3, #7
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40022000 	.word	0x40022000

080026d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <RCC_Delay+0x34>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <RCC_Delay+0x38>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a5b      	lsrs	r3, r3, #9
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026f4:	bf00      	nop
  }
  while (Delay --);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f9      	bne.n	80026f4 <RCC_Delay+0x1c>
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000004 	.word	0x20000004
 8002710:	10624dd3 	.word	0x10624dd3

08002714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e076      	b.n	8002814 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002736:	d009      	beq.n	800274c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
 800273e:	e005      	b.n	800274c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fd20 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002782:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d0:	ea42 0103 	orr.w	r1, r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	0c1a      	lsrs	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f002 0204 	and.w	r2, r2, #4
 80027f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800282c:	f7fe fe9a 	bl	8001564 <HAL_GetTick>
 8002830:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d001      	beq.n	8002846 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	e12a      	b.n	8002a9c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_Transmit+0x36>
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e122      	b.n	8002a9c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_SPI_Transmit+0x48>
 8002860:	2302      	movs	r3, #2
 8002862:	e11b      	b.n	8002a9c <HAL_SPI_Transmit+0x280>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2203      	movs	r2, #3
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b2:	d10f      	bne.n	80028d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d007      	beq.n	80028f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028fa:	d152      	bne.n	80029a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_SPI_Transmit+0xee>
 8002904:	8b7b      	ldrh	r3, [r7, #26]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d145      	bne.n	8002996 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	1c9a      	adds	r2, r3, #2
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800292e:	e032      	b.n	8002996 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d112      	bne.n	8002964 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	1c9a      	adds	r2, r3, #2
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002962:	e018      	b.n	8002996 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002964:	f7fe fdfe 	bl	8001564 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d803      	bhi.n	800297c <HAL_SPI_Transmit+0x160>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Transmit+0x166>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e082      	b.n	8002a9c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1c7      	bne.n	8002930 <HAL_SPI_Transmit+0x114>
 80029a0:	e053      	b.n	8002a4a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x194>
 80029aa:	8b7b      	ldrh	r3, [r7, #26]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d147      	bne.n	8002a40 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029d6:	e033      	b.n	8002a40 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d113      	bne.n	8002a0e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a0c:	e018      	b.n	8002a40 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a0e:	f7fe fda9 	bl	8001564 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d803      	bhi.n	8002a26 <HAL_SPI_Transmit+0x20a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a24:	d102      	bne.n	8002a2c <HAL_SPI_Transmit+0x210>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e02d      	b.n	8002a9c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1c6      	bne.n	80029d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f9f6 	bl	8002e40 <SPI_EndRxTxTransaction>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e097      	b.n	8002bf2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Transmit_DMA+0x2a>
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e08f      	b.n	8002bf2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_SPI_Transmit_DMA+0x3c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e088      	b.n	8002bf2 <HAL_SPI_Transmit_DMA+0x14e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b2e:	d10f      	bne.n	8002b50 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <HAL_SPI_Transmit_DMA+0x158>)
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	4a28      	ldr	r2, [pc, #160]	@ (8002c00 <HAL_SPI_Transmit_DMA+0x15c>)
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <HAL_SPI_Transmit_DMA+0x160>)
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	4619      	mov	r1, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b88:	f7fe fe54 	bl	8001834 <HAL_DMA_Start_IT>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e023      	b.n	8002bf2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb4:	2b40      	cmp	r3, #64	@ 0x40
 8002bb6:	d007      	beq.n	8002bc8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0220 	orr.w	r2, r2, #32
 8002bde:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0202 	orr.w	r2, r2, #2
 8002bee:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08002cd3 	.word	0x08002cd3
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002cef 	.word	0x08002cef

08002c08 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3a:	f7fe fc93 	bl	8001564 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d03b      	beq.n	8002cc6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0220 	bic.w	r2, r2, #32
 8002c5c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0202 	bic.w	r2, r2, #2
 8002c6c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	2164      	movs	r1, #100	@ 0x64
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f000 f8e4 	bl	8002e40 <SPI_EndRxTxTransaction>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ffab 	bl	8002c1a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002cc4:	e002      	b.n	8002ccc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7fd fb0c 	bl	80002e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff ff91 	bl	8002c08 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0203 	bic.w	r2, r2, #3
 8002d0a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff ff7a 	bl	8002c1a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d40:	f7fe fc10 	bl	8001564 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d50:	f7fe fc08 	bl	8001564 <HAL_GetTick>
 8002d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d56:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	015b      	lsls	r3, r3, #5
 8002d5c:	0d1b      	lsrs	r3, r3, #20
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d66:	e054      	b.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d6e:	d050      	beq.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d70:	f7fe fbf8 	bl	8001564 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d13d      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d9e:	d111      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002da8:	d004      	beq.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db2:	d107      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dcc:	d10f      	bne.n	8002dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e017      	b.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d19b      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000004 	.word	0x20000004

08002e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2201      	movs	r2, #1
 8002e54:	2102      	movs	r1, #2
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff ff6a 	bl	8002d30 <SPI_WaitFlagStateUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e013      	b.n	8002e9a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff ff57 	bl	8002d30 <SPI_WaitFlagStateUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e000      	b.n	8002e9a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e041      	b.n	8002f38 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f839 	bl	8002f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f000 f99d 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e03a      	b.n	8002fe2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_TIM_Base_Start_IT+0x98>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x58>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x58>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x58>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d010      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800

08002ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d020      	beq.n	800305c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0202 	mvn.w	r2, #2
 800302c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8d1 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f8c4 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8d3 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d020      	beq.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0204 	mvn.w	r2, #4
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8ab 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f89e 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8ad 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d020      	beq.n	80030f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01b      	beq.n	80030f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0208 	mvn.w	r2, #8
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f885 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f878 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f887 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d020      	beq.n	8003140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0210 	mvn.w	r2, #16
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2208      	movs	r2, #8
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f85f 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f852 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f861 	bl	80031fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0201 	mvn.w	r2, #1
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd ffd4 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8c3 	bl	800330e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f831 	bl	800320e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0220 	mvn.w	r2, #32
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f896 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <TIM_Base_SetConfig+0xd0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a2c      	ldr	r2, [pc, #176]	@ (80032f4 <TIM_Base_SetConfig+0xd4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2b      	ldr	r2, [pc, #172]	@ (80032f8 <TIM_Base_SetConfig+0xd8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a22      	ldr	r2, [pc, #136]	@ (80032f0 <TIM_Base_SetConfig+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <TIM_Base_SetConfig+0xd4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <TIM_Base_SetConfig+0xd8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d108      	bne.n	8003294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <TIM_Base_SetConfig+0xd0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f023 0201 	bic.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]
  }
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e042      	b.n	80033b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd ff98 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f971 	bl	800364c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d175      	bne.n	80034cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_UART_Transmit+0x2c>
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e06e      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fe f8b1 	bl	8001564 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003418:	d108      	bne.n	800342c <HAL_UART_Transmit+0x6c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e003      	b.n	8003434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003434:	e02e      	b.n	8003494 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f848 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e03a      	b.n	80034ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3302      	adds	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e007      	b.n	8003486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1cb      	bne.n	8003436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	@ 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f814 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e006      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	e03b      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034ee:	d037      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fe f838 	bl	8001564 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e03a      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b80      	cmp	r3, #128	@ 0x80
 800351c:	d020      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d01d      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d116      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f81d 	bl	8003588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2208      	movs	r2, #8
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e00f      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d0b4      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b095      	sub	sp, #84	@ 0x54
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d119      	bne.n	8003634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	647b      	str	r3, [r7, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003620:	61ba      	str	r2, [r7, #24]
 8003622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003642:	bf00      	nop
 8003644:	3754      	adds	r7, #84	@ 0x54
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003686:	f023 030c 	bic.w	r3, r3, #12
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	430b      	orrs	r3, r1
 8003692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <UART_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7fe ffcc 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	e002      	b.n	80036c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe ffb4 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80036c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009a      	lsls	r2, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a22      	ldr	r2, [pc, #136]	@ (8003764 <UART_SetConfig+0x118>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	0119      	lsls	r1, r3, #4
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <UART_SetConfig+0x118>)
 80036fa:	fba3 0302 	umull	r0, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2064      	movs	r0, #100	@ 0x64
 8003702:	fb00 f303 	mul.w	r3, r0, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	3332      	adds	r3, #50	@ 0x32
 800370c:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <UART_SetConfig+0x118>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003718:	4419      	add	r1, r3
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <UART_SetConfig+0x118>)
 8003732:	fba3 0302 	umull	r0, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2064      	movs	r0, #100	@ 0x64
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	3332      	adds	r3, #50	@ 0x32
 8003744:	4a07      	ldr	r2, [pc, #28]	@ (8003764 <UART_SetConfig+0x118>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	440a      	add	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40013800 	.word	0x40013800
 8003764:	51eb851f 	.word	0x51eb851f

08003768 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377a:	2b84      	cmp	r3, #132	@ 0x84
 800377c:	d005      	beq.n	800378a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800377e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	3303      	adds	r3, #3
 8003788:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800379a:	f000 faf7 	bl	8003d8c <vTaskStartScheduler>
  
  return osOK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af04      	add	r7, sp, #16
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d020      	beq.n	80037f8 <osThreadCreate+0x54>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01c      	beq.n	80037f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685c      	ldr	r4, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691e      	ldr	r6, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ffc9 	bl	8003768 <makeFreeRtosPriority>
 80037d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037e0:	9202      	str	r2, [sp, #8]
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	9100      	str	r1, [sp, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	4632      	mov	r2, r6
 80037ea:	4629      	mov	r1, r5
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 f8e8 	bl	80039c2 <xTaskCreateStatic>
 80037f2:	4603      	mov	r3, r0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e01c      	b.n	8003832 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685c      	ldr	r4, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003804:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ffab 	bl	8003768 <makeFreeRtosPriority>
 8003812:	4602      	mov	r2, r0
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	9200      	str	r2, [sp, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4632      	mov	r2, r6
 8003820:	4629      	mov	r1, r5
 8003822:	4620      	mov	r0, r4
 8003824:	f000 f92d 	bl	8003a82 <xTaskCreate>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800383c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <osDelay+0x16>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	e000      	b.n	8003854 <osDelay+0x18>
 8003852:	2301      	movs	r3, #1
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fa63 	bl	8003d20 <vTaskDelay>
  
  return osOK;
 800385a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 0208 	add.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800387c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f103 0208 	add.w	r2, r3, #8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f103 0208 	add.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003916:	d103      	bne.n	8003920 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e00c      	b.n	800393a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3308      	adds	r3, #8
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e002      	b.n	800392e <vListInsert+0x2e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	d2f6      	bcs.n	8003928 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6852      	ldr	r2, [r2, #4]
 8003990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08e      	sub	sp, #56	@ 0x38
 80039c6:	af04      	add	r7, sp, #16
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <xTaskCreateStatic+0x4a>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61fb      	str	r3, [r7, #28]
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a0c:	23a0      	movs	r3, #160	@ 0xa0
 8003a0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a14:	d00b      	beq.n	8003a2e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	61bb      	str	r3, [r7, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01e      	beq.n	8003a74 <xTaskCreateStatic+0xb2>
 8003a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f850 	bl	8003b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a6e:	f000 f8ed 	bl	8003c4c <prvAddNewTaskToReadyList>
 8003a72:	e001      	b.n	8003a78 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a78:	697b      	ldr	r3, [r7, #20]
	}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3728      	adds	r7, #40	@ 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b08c      	sub	sp, #48	@ 0x30
 8003a86:	af04      	add	r7, sp, #16
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fea2 	bl	80047e0 <pvPortMalloc>
 8003a9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aa4:	20a0      	movs	r0, #160	@ 0xa0
 8003aa6:	f000 fe9b 	bl	80047e0 <pvPortMalloc>
 8003aaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ab8:	e005      	b.n	8003ac6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f000 ff5e 	bl	800497c <vPortFree>
 8003ac0:	e001      	b.n	8003ac6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9303      	str	r3, [sp, #12]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	9302      	str	r3, [sp, #8]
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f80e 	bl	8003b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af0:	69f8      	ldr	r0, [r7, #28]
 8003af2:	f000 f8ab 	bl	8003c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e002      	b.n	8003b02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b02:	69bb      	ldr	r3, [r7, #24]
	}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b24:	3b01      	subs	r3, #1
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	617b      	str	r3, [r7, #20]
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01f      	beq.n	8003b9c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e012      	b.n	8003b88 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	7819      	ldrb	r1, [r3, #0]
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3334      	adds	r3, #52	@ 0x34
 8003b72:	460a      	mov	r2, r1
 8003b74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d9e9      	bls.n	8003b62 <prvInitialiseNewTask+0x56>
 8003b8e:	e000      	b.n	8003b92 <prvInitialiseNewTask+0x86>
			{
				break;
 8003b90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b9a:	e003      	b.n	8003ba4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d901      	bls.n	8003bae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003baa:	2306      	movs	r3, #6
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fe6c 	bl	80038a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	3318      	adds	r3, #24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fe67 	bl	80038a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	f1c3 0207 	rsb	r2, r3, #7
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	334c      	adds	r3, #76	@ 0x4c
 8003bfe:	224c      	movs	r2, #76	@ 0x4c
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f832 	bl	8004c6c <memset>
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <prvInitialiseNewTask+0x134>)
 8003c0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	4a0c      	ldr	r2, [pc, #48]	@ (8003c44 <prvInitialiseNewTask+0x138>)
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c16:	4a0c      	ldr	r2, [pc, #48]	@ (8003c48 <prvInitialiseNewTask+0x13c>)
 8003c18:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	69b8      	ldr	r0, [r7, #24]
 8003c20:	f000 fc28 	bl	8004474 <pxPortInitialiseStack>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c36:	bf00      	nop
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200011d8 	.word	0x200011d8
 8003c44:	20001240 	.word	0x20001240
 8003c48:	200012a8 	.word	0x200012a8

08003c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c54:	f000 fd02 	bl	800465c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c58:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <prvAddNewTaskToReadyList+0xb8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	4a29      	ldr	r2, [pc, #164]	@ (8003d04 <prvAddNewTaskToReadyList+0xb8>)
 8003c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c62:	4b29      	ldr	r3, [pc, #164]	@ (8003d08 <prvAddNewTaskToReadyList+0xbc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c6a:	4a27      	ldr	r2, [pc, #156]	@ (8003d08 <prvAddNewTaskToReadyList+0xbc>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <prvAddNewTaskToReadyList+0xb8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d110      	bne.n	8003c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c78:	f000 fad2 	bl	8004220 <prvInitialiseTaskLists>
 8003c7c:	e00d      	b.n	8003c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c7e:	4b23      	ldr	r3, [pc, #140]	@ (8003d0c <prvAddNewTaskToReadyList+0xc0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c86:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <prvAddNewTaskToReadyList+0xbc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d802      	bhi.n	8003c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <prvAddNewTaskToReadyList+0xbc>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d10 <prvAddNewTaskToReadyList+0xc4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d10 <prvAddNewTaskToReadyList+0xc4>)
 8003ca2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <prvAddNewTaskToReadyList+0xc8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <prvAddNewTaskToReadyList+0xc8>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <prvAddNewTaskToReadyList+0xcc>)
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7ff fdf4 	bl	80038ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cd2:	f000 fcf3 	bl	80046bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <prvAddNewTaskToReadyList+0xc0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <prvAddNewTaskToReadyList+0xbc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d207      	bcs.n	8003cfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cec:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <prvAddNewTaskToReadyList+0xd0>)
 8003cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000584 	.word	0x20000584
 8003d08:	20000484 	.word	0x20000484
 8003d0c:	20000590 	.word	0x20000590
 8003d10:	200005a0 	.word	0x200005a0
 8003d14:	2000058c 	.word	0x2000058c
 8003d18:	20000488 	.word	0x20000488
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d018      	beq.n	8003d64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d32:	4b14      	ldr	r3, [pc, #80]	@ (8003d84 <vTaskDelay+0x64>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <vTaskDelay+0x32>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60bb      	str	r3, [r7, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	e7fd      	b.n	8003d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d52:	f000 f885 	bl	8003e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d56:	2100      	movs	r1, #0
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fb25 	bl	80043a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d5e:	f000 f88d 	bl	8003e7c <xTaskResumeAll>
 8003d62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d6a:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <vTaskDelay+0x68>)
 8003d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200005ac 	.word	0x200005ac
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	@ 0x28
 8003d90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d9a:	463a      	mov	r2, r7
 8003d9c:	1d39      	adds	r1, r7, #4
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fe6c 	bl	8000a80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	9202      	str	r2, [sp, #8]
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	460a      	mov	r2, r1
 8003dba:	4921      	ldr	r1, [pc, #132]	@ (8003e40 <vTaskStartScheduler+0xb4>)
 8003dbc:	4821      	ldr	r0, [pc, #132]	@ (8003e44 <vTaskStartScheduler+0xb8>)
 8003dbe:	f7ff fe00 	bl	80039c2 <xTaskCreateStatic>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <vTaskStartScheduler+0xbc>)
 8003dc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e48 <vTaskStartScheduler+0xbc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e001      	b.n	8003dda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d11b      	bne.n	8003e18 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	613b      	str	r3, [r7, #16]
}
 8003df2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003df4:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <vTaskStartScheduler+0xc0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	334c      	adds	r3, #76	@ 0x4c
 8003dfa:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <vTaskStartScheduler+0xc4>)
 8003dfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <vTaskStartScheduler+0xc8>)
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e06:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <vTaskStartScheduler+0xcc>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e0c:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <vTaskStartScheduler+0xd0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e12:	f000 fbb1 	bl	8004578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e16:	e00f      	b.n	8003e38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e1e:	d10b      	bne.n	8003e38 <vTaskStartScheduler+0xac>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <vTaskStartScheduler+0xa8>
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08005754 	.word	0x08005754
 8003e44:	080041f1 	.word	0x080041f1
 8003e48:	200005a8 	.word	0x200005a8
 8003e4c:	20000484 	.word	0x20000484
 8003e50:	20000014 	.word	0x20000014
 8003e54:	200005a4 	.word	0x200005a4
 8003e58:	20000590 	.word	0x20000590
 8003e5c:	20000588 	.word	0x20000588

08003e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <vTaskSuspendAll+0x18>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4a03      	ldr	r2, [pc, #12]	@ (8003e78 <vTaskSuspendAll+0x18>)
 8003e6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	200005ac 	.word	0x200005ac

08003e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e8a:	4b42      	ldr	r3, [pc, #264]	@ (8003f94 <xTaskResumeAll+0x118>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <xTaskResumeAll+0x2e>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	603b      	str	r3, [r7, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	e7fd      	b.n	8003ea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eaa:	f000 fbd7 	bl	800465c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003eae:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <xTaskResumeAll+0x118>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	4a37      	ldr	r2, [pc, #220]	@ (8003f94 <xTaskResumeAll+0x118>)
 8003eb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb8:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <xTaskResumeAll+0x118>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d161      	bne.n	8003f84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ec0:	4b35      	ldr	r3, [pc, #212]	@ (8003f98 <xTaskResumeAll+0x11c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05d      	beq.n	8003f84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ec8:	e02e      	b.n	8003f28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eca:	4b34      	ldr	r3, [pc, #208]	@ (8003f9c <xTaskResumeAll+0x120>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3318      	adds	r3, #24
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fd4a 	bl	8003970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fd45 	bl	8003970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	2201      	movs	r2, #1
 8003eec:	409a      	lsls	r2, r3
 8003eee:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa0 <xTaskResumeAll+0x124>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa0 <xTaskResumeAll+0x124>)
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4a27      	ldr	r2, [pc, #156]	@ (8003fa4 <xTaskResumeAll+0x128>)
 8003f06:	441a      	add	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7ff fcd3 	bl	80038ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f18:	4b23      	ldr	r3, [pc, #140]	@ (8003fa8 <xTaskResumeAll+0x12c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f22:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <xTaskResumeAll+0x130>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <xTaskResumeAll+0x120>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1cc      	bne.n	8003eca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f36:	f000 fa17 	bl	8004368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <xTaskResumeAll+0x134>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d010      	beq.n	8003f68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f46:	f000 f837 	bl	8003fb8 <xTaskIncrementTick>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f50:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <xTaskResumeAll+0x130>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f1      	bne.n	8003f46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <xTaskResumeAll+0x134>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f68:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <xTaskResumeAll+0x130>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f74:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <xTaskResumeAll+0x138>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f84:	f000 fb9a 	bl	80046bc <vPortExitCritical>

	return xAlreadyYielded;
 8003f88:	68bb      	ldr	r3, [r7, #8]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200005ac 	.word	0x200005ac
 8003f98:	20000584 	.word	0x20000584
 8003f9c:	20000544 	.word	0x20000544
 8003fa0:	2000058c 	.word	0x2000058c
 8003fa4:	20000488 	.word	0x20000488
 8003fa8:	20000484 	.word	0x20000484
 8003fac:	20000598 	.word	0x20000598
 8003fb0:	20000594 	.word	0x20000594
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004100 <xTaskIncrementTick+0x148>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 808f 	bne.w	80040ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8004104 <xTaskIncrementTick+0x14c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004104 <xTaskIncrementTick+0x14c>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d121      	bne.n	8004024 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fe0:	4b49      	ldr	r3, [pc, #292]	@ (8004108 <xTaskIncrementTick+0x150>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <xTaskIncrementTick+0x46>
 8004002:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <xTaskIncrementTick+0x150>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	4b40      	ldr	r3, [pc, #256]	@ (800410c <xTaskIncrementTick+0x154>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3e      	ldr	r2, [pc, #248]	@ (8004108 <xTaskIncrementTick+0x150>)
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4a3e      	ldr	r2, [pc, #248]	@ (800410c <xTaskIncrementTick+0x154>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b3e      	ldr	r3, [pc, #248]	@ (8004110 <xTaskIncrementTick+0x158>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	4a3c      	ldr	r2, [pc, #240]	@ (8004110 <xTaskIncrementTick+0x158>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	f000 f9a2 	bl	8004368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <xTaskIncrementTick+0x15c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	d348      	bcc.n	80040c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402e:	4b36      	ldr	r3, [pc, #216]	@ (8004108 <xTaskIncrementTick+0x150>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	4b36      	ldr	r3, [pc, #216]	@ (8004114 <xTaskIncrementTick+0x15c>)
 800403a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800403e:	601a      	str	r2, [r3, #0]
					break;
 8004040:	e03e      	b.n	80040c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004042:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <xTaskIncrementTick+0x150>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d203      	bcs.n	8004062 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800405a:	4a2e      	ldr	r2, [pc, #184]	@ (8004114 <xTaskIncrementTick+0x15c>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004060:	e02e      	b.n	80040c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fc82 	bl	8003970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	3318      	adds	r3, #24
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fc79 	bl	8003970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	2201      	movs	r2, #1
 8004084:	409a      	lsls	r2, r3
 8004086:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <xTaskIncrementTick+0x160>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <xTaskIncrementTick+0x160>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4a1f      	ldr	r2, [pc, #124]	@ (800411c <xTaskIncrementTick+0x164>)
 800409e:	441a      	add	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7ff fc07 	bl	80038ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <xTaskIncrementTick+0x168>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3b9      	bcc.n	800402e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040be:	e7b6      	b.n	800402e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040c0:	4b17      	ldr	r3, [pc, #92]	@ (8004120 <xTaskIncrementTick+0x168>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	4915      	ldr	r1, [pc, #84]	@ (800411c <xTaskIncrementTick+0x164>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d901      	bls.n	80040dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <xTaskIncrementTick+0x16c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e004      	b.n	80040f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <xTaskIncrementTick+0x170>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <xTaskIncrementTick+0x170>)
 80040f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040f4:	697b      	ldr	r3, [r7, #20]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	200005ac 	.word	0x200005ac
 8004104:	20000588 	.word	0x20000588
 8004108:	2000053c 	.word	0x2000053c
 800410c:	20000540 	.word	0x20000540
 8004110:	2000059c 	.word	0x2000059c
 8004114:	200005a4 	.word	0x200005a4
 8004118:	2000058c 	.word	0x2000058c
 800411c:	20000488 	.word	0x20000488
 8004120:	20000484 	.word	0x20000484
 8004124:	20000598 	.word	0x20000598
 8004128:	20000594 	.word	0x20000594

0800412c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004132:	4b29      	ldr	r3, [pc, #164]	@ (80041d8 <vTaskSwitchContext+0xac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800413a:	4b28      	ldr	r3, [pc, #160]	@ (80041dc <vTaskSwitchContext+0xb0>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004140:	e045      	b.n	80041ce <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004142:	4b26      	ldr	r3, [pc, #152]	@ (80041dc <vTaskSwitchContext+0xb0>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004148:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <vTaskSwitchContext+0xb4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004156:	7afb      	ldrb	r3, [r7, #11]
 8004158:	f1c3 031f 	rsb	r3, r3, #31
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	4921      	ldr	r1, [pc, #132]	@ (80041e4 <vTaskSwitchContext+0xb8>)
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	607b      	str	r3, [r7, #4]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <vTaskSwitchContext+0x5a>
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <vTaskSwitchContext+0xb8>)
 8004196:	4413      	add	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3308      	adds	r3, #8
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d104      	bne.n	80041ba <vTaskSwitchContext+0x8e>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <vTaskSwitchContext+0xbc>)
 80041c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041c4:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <vTaskSwitchContext+0xbc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	334c      	adds	r3, #76	@ 0x4c
 80041ca:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <vTaskSwitchContext+0xc0>)
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	200005ac 	.word	0x200005ac
 80041dc:	20000598 	.word	0x20000598
 80041e0:	2000058c 	.word	0x2000058c
 80041e4:	20000488 	.word	0x20000488
 80041e8:	20000484 	.word	0x20000484
 80041ec:	20000014 	.word	0x20000014

080041f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041f8:	f000 f852 	bl	80042a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <prvIdleTask+0x28>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d9f9      	bls.n	80041f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <prvIdleTask+0x2c>)
 8004206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004214:	e7f0      	b.n	80041f8 <prvIdleTask+0x8>
 8004216:	bf00      	nop
 8004218:	20000488 	.word	0x20000488
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	e00c      	b.n	8004246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <prvInitialiseTaskLists+0x60>)
 8004238:	4413      	add	r3, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fb12 	bl	8003864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3301      	adds	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b06      	cmp	r3, #6
 800424a:	d9ef      	bls.n	800422c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800424c:	480d      	ldr	r0, [pc, #52]	@ (8004284 <prvInitialiseTaskLists+0x64>)
 800424e:	f7ff fb09 	bl	8003864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004252:	480d      	ldr	r0, [pc, #52]	@ (8004288 <prvInitialiseTaskLists+0x68>)
 8004254:	f7ff fb06 	bl	8003864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004258:	480c      	ldr	r0, [pc, #48]	@ (800428c <prvInitialiseTaskLists+0x6c>)
 800425a:	f7ff fb03 	bl	8003864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800425e:	480c      	ldr	r0, [pc, #48]	@ (8004290 <prvInitialiseTaskLists+0x70>)
 8004260:	f7ff fb00 	bl	8003864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004264:	480b      	ldr	r0, [pc, #44]	@ (8004294 <prvInitialiseTaskLists+0x74>)
 8004266:	f7ff fafd 	bl	8003864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <prvInitialiseTaskLists+0x78>)
 800426c:	4a05      	ldr	r2, [pc, #20]	@ (8004284 <prvInitialiseTaskLists+0x64>)
 800426e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004270:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <prvInitialiseTaskLists+0x7c>)
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <prvInitialiseTaskLists+0x68>)
 8004274:	601a      	str	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000488 	.word	0x20000488
 8004284:	20000514 	.word	0x20000514
 8004288:	20000528 	.word	0x20000528
 800428c:	20000544 	.word	0x20000544
 8004290:	20000558 	.word	0x20000558
 8004294:	20000570 	.word	0x20000570
 8004298:	2000053c 	.word	0x2000053c
 800429c:	20000540 	.word	0x20000540

080042a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042a6:	e019      	b.n	80042dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042a8:	f000 f9d8 	bl	800465c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ac:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <prvCheckTasksWaitingTermination+0x50>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fb59 	bl	8003970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <prvCheckTasksWaitingTermination+0x54>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	4a0b      	ldr	r2, [pc, #44]	@ (80042f4 <prvCheckTasksWaitingTermination+0x54>)
 80042c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <prvCheckTasksWaitingTermination+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	4a0a      	ldr	r2, [pc, #40]	@ (80042f8 <prvCheckTasksWaitingTermination+0x58>)
 80042d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042d2:	f000 f9f3 	bl	80046bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f810 	bl	80042fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <prvCheckTasksWaitingTermination+0x58>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e1      	bne.n	80042a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000558 	.word	0x20000558
 80042f4:	20000584 	.word	0x20000584
 80042f8:	2000056c 	.word	0x2000056c

080042fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	334c      	adds	r3, #76	@ 0x4c
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fcb7 	bl	8004c7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004314:	2b00      	cmp	r3, #0
 8004316:	d108      	bne.n	800432a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fb2d 	bl	800497c <vPortFree>
				vPortFree( pxTCB );
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb2a 	bl	800497c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004328:	e019      	b.n	800435e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004330:	2b01      	cmp	r3, #1
 8004332:	d103      	bne.n	800433c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fb21 	bl	800497c <vPortFree>
	}
 800433a:	e010      	b.n	800435e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004342:	2b02      	cmp	r3, #2
 8004344:	d00b      	beq.n	800435e <prvDeleteTCB+0x62>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60fb      	str	r3, [r7, #12]
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <prvDeleteTCB+0x5e>
	}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <prvResetNextTaskUnblockTime+0x38>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <prvResetNextTaskUnblockTime+0x3c>)
 800437a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800437e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004380:	e008      	b.n	8004394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <prvResetNextTaskUnblockTime+0x38>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a04      	ldr	r2, [pc, #16]	@ (80043a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000053c 	.word	0x2000053c
 80043a4:	200005a4 	.word	0x200005a4

080043a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043b2:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b8:	4b28      	ldr	r3, [pc, #160]	@ (800445c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3304      	adds	r3, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fad6 	bl	8003970 <uxListRemove>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043ca:	4b24      	ldr	r3, [pc, #144]	@ (800445c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	4b21      	ldr	r3, [pc, #132]	@ (8004460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4013      	ands	r3, r2
 80043de:	4a20      	ldr	r2, [pc, #128]	@ (8004460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043e8:	d10a      	bne.n	8004400 <prvAddCurrentTaskToDelayedList+0x58>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	481a      	ldr	r0, [pc, #104]	@ (8004464 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043fa:	f7ff fa5e 	bl	80038ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043fe:	e026      	b.n	800444e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004408:	4b14      	ldr	r3, [pc, #80]	@ (800445c <prvAddCurrentTaskToDelayedList+0xb4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d209      	bcs.n	800442c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <prvAddCurrentTaskToDelayedList+0xc0>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <prvAddCurrentTaskToDelayedList+0xb4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7ff fa6b 	bl	8003900 <vListInsert>
}
 800442a:	e010      	b.n	800444e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800442c:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <prvAddCurrentTaskToDelayedList+0xc4>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7ff fa61 	bl	8003900 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800443e:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	429a      	cmp	r2, r3
 8004446:	d202      	bcs.n	800444e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004448:	4a09      	ldr	r2, [pc, #36]	@ (8004470 <prvAddCurrentTaskToDelayedList+0xc8>)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6013      	str	r3, [r2, #0]
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000588 	.word	0x20000588
 800445c:	20000484 	.word	0x20000484
 8004460:	2000058c 	.word	0x2000058c
 8004464:	20000570 	.word	0x20000570
 8004468:	20000540 	.word	0x20000540
 800446c:	2000053c 	.word	0x2000053c
 8004470:	200005a4 	.word	0x200005a4

08004474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3b04      	subs	r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800448c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3b04      	subs	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f023 0201 	bic.w	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3b04      	subs	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044a4:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <pxPortInitialiseStack+0x54>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b14      	subs	r3, #20
 80044ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b20      	subs	r3, #32
 80044ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	080044cd 	.word	0x080044cd

080044cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044d6:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <prvTaskExitError+0x54>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044de:	d00b      	beq.n	80044f8 <prvTaskExitError+0x2c>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60fb      	str	r3, [r7, #12]
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <prvTaskExitError+0x28>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60bb      	str	r3, [r7, #8]
}
 800450a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800450c:	bf00      	nop
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0fc      	beq.n	800450e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	20000010 	.word	0x20000010
	...

08004530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <pxCurrentTCBConst2>)
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800453a:	f380 8809 	msr	PSP, r0
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	f04e 0e0d 	orr.w	lr, lr, #13
 800454e:	4770      	bx	lr

08004550 <pxCurrentTCBConst2>:
 8004550:	20000484 	.word	0x20000484
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004558:	4806      	ldr	r0, [pc, #24]	@ (8004574 <prvPortStartFirstTask+0x1c>)
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f380 8808 	msr	MSP, r0
 8004562:	b662      	cpsie	i
 8004564:	b661      	cpsie	f
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	df00      	svc	0
 8004570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004572:	bf00      	nop
 8004574:	e000ed08 	.word	0xe000ed08

08004578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800457e:	4b32      	ldr	r3, [pc, #200]	@ (8004648 <xPortStartScheduler+0xd0>)
 8004580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	22ff      	movs	r2, #255	@ 0xff
 800458e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <xPortStartScheduler+0xd4>)
 80045a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ac:	e009      	b.n	80045c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045ae:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	4a26      	ldr	r2, [pc, #152]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d0ef      	beq.n	80045ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ce:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00b      	beq.n	80045f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60bb      	str	r3, [r7, #8]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045f2:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	4a15      	ldr	r2, [pc, #84]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045fc:	4b14      	ldr	r3, [pc, #80]	@ (8004650 <xPortStartScheduler+0xd8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004604:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <xPortStartScheduler+0xd8>)
 8004606:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004610:	4b10      	ldr	r3, [pc, #64]	@ (8004654 <xPortStartScheduler+0xdc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0f      	ldr	r2, [pc, #60]	@ (8004654 <xPortStartScheduler+0xdc>)
 8004616:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800461a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800461c:	4b0d      	ldr	r3, [pc, #52]	@ (8004654 <xPortStartScheduler+0xdc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0c      	ldr	r2, [pc, #48]	@ (8004654 <xPortStartScheduler+0xdc>)
 8004622:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004626:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004628:	f000 f8b8 	bl	800479c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <xPortStartScheduler+0xe0>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004632:	f7ff ff91 	bl	8004558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004636:	f7ff fd79 	bl	800412c <vTaskSwitchContext>
	prvTaskExitError();
 800463a:	f7ff ff47 	bl	80044cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	e000e400 	.word	0xe000e400
 800464c:	200005b0 	.word	0x200005b0
 8004650:	200005b4 	.word	0x200005b4
 8004654:	e000ed20 	.word	0xe000ed20
 8004658:	20000010 	.word	0x20000010

0800465c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	607b      	str	r3, [r7, #4]
}
 8004674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <vPortEnterCritical+0x58>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <vPortEnterCritical+0x58>)
 800467e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <vPortEnterCritical+0x58>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d110      	bne.n	80046aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <vPortEnterCritical+0x5c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <vPortEnterCritical+0x4e>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	603b      	str	r3, [r7, #0]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <vPortEnterCritical+0x4a>
	}
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	20000010 	.word	0x20000010
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046c2:	4b12      	ldr	r3, [pc, #72]	@ (800470c <vPortExitCritical+0x50>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <vPortExitCritical+0x26>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046e2:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <vPortExitCritical+0x50>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4a08      	ldr	r2, [pc, #32]	@ (800470c <vPortExitCritical+0x50>)
 80046ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046ec:	4b07      	ldr	r3, [pc, #28]	@ (800470c <vPortExitCritical+0x50>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <vPortExitCritical+0x44>
 80046f4:	2300      	movs	r3, #0
 80046f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000010 	.word	0x20000010

08004710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004710:	f3ef 8009 	mrs	r0, PSP
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <pxCurrentTCBConst>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004720:	6010      	str	r0, [r2, #0]
 8004722:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004726:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800472a:	f380 8811 	msr	BASEPRI, r0
 800472e:	f7ff fcfd 	bl	800412c <vTaskSwitchContext>
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8811 	msr	BASEPRI, r0
 800473a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	6808      	ldr	r0, [r1, #0]
 8004742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004746:	f380 8809 	msr	PSP, r0
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	4770      	bx	lr

08004750 <pxCurrentTCBConst>:
 8004750:	20000484 	.word	0x20000484
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004772:	f7ff fc21 	bl	8003fb8 <xTaskIncrementTick>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <SysTick_Handler+0x40>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f383 8811 	msr	BASEPRI, r3
}
 800478e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <vPortSetupTimerInterrupt+0x30>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047a6:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <vPortSetupTimerInterrupt+0x38>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <vPortSetupTimerInterrupt+0x3c>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	4a08      	ldr	r2, [pc, #32]	@ (80047dc <vPortSetupTimerInterrupt+0x40>)
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047be:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <vPortSetupTimerInterrupt+0x30>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	e000e010 	.word	0xe000e010
 80047d0:	e000e018 	.word	0xe000e018
 80047d4:	20000004 	.word	0x20000004
 80047d8:	10624dd3 	.word	0x10624dd3
 80047dc:	e000e014 	.word	0xe000e014

080047e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	@ 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047ec:	f7ff fb38 	bl	8003e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004964 <pvPortMalloc+0x184>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047f8:	f000 f924 	bl	8004a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004968 <pvPortMalloc+0x188>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8095 	bne.w	8004934 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01e      	beq.n	800484e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004810:	2208      	movs	r2, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f023 0307 	bic.w	r3, r3, #7
 8004828:	3308      	adds	r3, #8
 800482a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <pvPortMalloc+0x6e>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	617b      	str	r3, [r7, #20]
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	e7fd      	b.n	800484a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d06f      	beq.n	8004934 <pvPortMalloc+0x154>
 8004854:	4b45      	ldr	r3, [pc, #276]	@ (800496c <pvPortMalloc+0x18c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d86a      	bhi.n	8004934 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800485e:	4b44      	ldr	r3, [pc, #272]	@ (8004970 <pvPortMalloc+0x190>)
 8004860:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004862:	4b43      	ldr	r3, [pc, #268]	@ (8004970 <pvPortMalloc+0x190>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004868:	e004      	b.n	8004874 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d903      	bls.n	8004886 <pvPortMalloc+0xa6>
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f1      	bne.n	800486a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004886:	4b37      	ldr	r3, [pc, #220]	@ (8004964 <pvPortMalloc+0x184>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800488c:	429a      	cmp	r2, r3
 800488e:	d051      	beq.n	8004934 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	4413      	add	r3, r2
 8004898:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	1ad2      	subs	r2, r2, r3
 80048aa:	2308      	movs	r3, #8
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d920      	bls.n	80048f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <pvPortMalloc+0xfc>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	613b      	str	r3, [r7, #16]
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ee:	69b8      	ldr	r0, [r7, #24]
 80048f0:	f000 f90a 	bl	8004b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048f4:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <pvPortMalloc+0x18c>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4a1b      	ldr	r2, [pc, #108]	@ (800496c <pvPortMalloc+0x18c>)
 8004900:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004902:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <pvPortMalloc+0x18c>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <pvPortMalloc+0x194>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d203      	bcs.n	8004916 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800490e:	4b17      	ldr	r3, [pc, #92]	@ (800496c <pvPortMalloc+0x18c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <pvPortMalloc+0x194>)
 8004914:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	4b13      	ldr	r3, [pc, #76]	@ (8004968 <pvPortMalloc+0x188>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	431a      	orrs	r2, r3
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800492a:	4b13      	ldr	r3, [pc, #76]	@ (8004978 <pvPortMalloc+0x198>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	4a11      	ldr	r2, [pc, #68]	@ (8004978 <pvPortMalloc+0x198>)
 8004932:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004934:	f7ff faa2 	bl	8003e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <pvPortMalloc+0x17a>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <pvPortMalloc+0x176>
	return pvReturn;
 800495a:	69fb      	ldr	r3, [r7, #28]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3728      	adds	r7, #40	@ 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	200011c0 	.word	0x200011c0
 8004968:	200011d4 	.word	0x200011d4
 800496c:	200011c4 	.word	0x200011c4
 8004970:	200011b8 	.word	0x200011b8
 8004974:	200011c8 	.word	0x200011c8
 8004978:	200011cc 	.word	0x200011cc

0800497c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d04f      	beq.n	8004a2e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800498e:	2308      	movs	r3, #8
 8004990:	425b      	negs	r3, r3
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4b25      	ldr	r3, [pc, #148]	@ (8004a38 <vPortFree+0xbc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <vPortFree+0x46>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60fb      	str	r3, [r7, #12]
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <vPortFree+0x66>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60bb      	str	r3, [r7, #8]
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	4b14      	ldr	r3, [pc, #80]	@ (8004a38 <vPortFree+0xbc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01e      	beq.n	8004a2e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d11a      	bne.n	8004a2e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <vPortFree+0xbc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	401a      	ands	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a08:	f7ff fa2a 	bl	8003e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <vPortFree+0xc0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4413      	add	r3, r2
 8004a16:	4a09      	ldr	r2, [pc, #36]	@ (8004a3c <vPortFree+0xc0>)
 8004a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a1a:	6938      	ldr	r0, [r7, #16]
 8004a1c:	f000 f874 	bl	8004b08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <vPortFree+0xc4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	4a06      	ldr	r2, [pc, #24]	@ (8004a40 <vPortFree+0xc4>)
 8004a28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a2a:	f7ff fa27 	bl	8003e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200011d4 	.word	0x200011d4
 8004a3c:	200011c4 	.word	0x200011c4
 8004a40:	200011d0 	.word	0x200011d0

08004a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a50:	4b27      	ldr	r3, [pc, #156]	@ (8004af0 <prvHeapInit+0xac>)
 8004a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3307      	adds	r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0307 	bic.w	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <prvHeapInit+0xac>)
 8004a74:	4413      	add	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <prvHeapInit+0xb0>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a82:	4b1c      	ldr	r3, [pc, #112]	@ (8004af4 <prvHeapInit+0xb0>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a90:	2208      	movs	r2, #8
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0307 	bic.w	r3, r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <prvHeapInit+0xb4>)
 8004aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004aa6:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <prvHeapInit+0xb4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004aae:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <prvHeapInit+0xb4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <prvHeapInit+0xb4>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8004afc <prvHeapInit+0xb8>)
 8004ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4a09      	ldr	r2, [pc, #36]	@ (8004b00 <prvHeapInit+0xbc>)
 8004ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004adc:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <prvHeapInit+0xc0>)
 8004ade:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	200005b8 	.word	0x200005b8
 8004af4:	200011b8 	.word	0x200011b8
 8004af8:	200011c0 	.word	0x200011c0
 8004afc:	200011c8 	.word	0x200011c8
 8004b00:	200011c4 	.word	0x200011c4
 8004b04:	200011d4 	.word	0x200011d4

08004b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b10:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <prvInsertBlockIntoFreeList+0xa8>)
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e002      	b.n	8004b1c <prvInsertBlockIntoFreeList+0x14>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d8f7      	bhi.n	8004b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d108      	bne.n	8004b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	441a      	add	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	441a      	add	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d118      	bne.n	8004b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <prvInsertBlockIntoFreeList+0xac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d00d      	beq.n	8004b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e008      	b.n	8004b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <prvInsertBlockIntoFreeList+0xac>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e003      	b.n	8004b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d002      	beq.n	8004ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	200011b8 	.word	0x200011b8
 8004bb4:	200011c0 	.word	0x200011c0

08004bb8 <siprintf>:
 8004bb8:	b40e      	push	{r1, r2, r3}
 8004bba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bbe:	b500      	push	{lr}
 8004bc0:	b09c      	sub	sp, #112	@ 0x70
 8004bc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bc4:	9002      	str	r0, [sp, #8]
 8004bc6:	9006      	str	r0, [sp, #24]
 8004bc8:	9107      	str	r1, [sp, #28]
 8004bca:	9104      	str	r1, [sp, #16]
 8004bcc:	4808      	ldr	r0, [pc, #32]	@ (8004bf0 <siprintf+0x38>)
 8004bce:	4909      	ldr	r1, [pc, #36]	@ (8004bf4 <siprintf+0x3c>)
 8004bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd4:	9105      	str	r1, [sp, #20]
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	a902      	add	r1, sp, #8
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	f000 fa30 	bl	8005040 <_svfiprintf_r>
 8004be0:	2200      	movs	r2, #0
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	b01c      	add	sp, #112	@ 0x70
 8004be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bec:	b003      	add	sp, #12
 8004bee:	4770      	bx	lr
 8004bf0:	20000014 	.word	0x20000014
 8004bf4:	ffff0208 	.word	0xffff0208

08004bf8 <_vsniprintf_r>:
 8004bf8:	b530      	push	{r4, r5, lr}
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	4605      	mov	r5, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	b09b      	sub	sp, #108	@ 0x6c
 8004c04:	da05      	bge.n	8004c12 <_vsniprintf_r+0x1a>
 8004c06:	238b      	movs	r3, #139	@ 0x8b
 8004c08:	6003      	str	r3, [r0, #0]
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c0e:	b01b      	add	sp, #108	@ 0x6c
 8004c10:	bd30      	pop	{r4, r5, pc}
 8004c12:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004c1a:	bf0c      	ite	eq
 8004c1c:	4623      	moveq	r3, r4
 8004c1e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	9305      	str	r3, [sp, #20]
 8004c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c2a:	9100      	str	r1, [sp, #0]
 8004c2c:	9104      	str	r1, [sp, #16]
 8004c2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004c32:	4669      	mov	r1, sp
 8004c34:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004c36:	f000 fa03 	bl	8005040 <_svfiprintf_r>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	bfbc      	itt	lt
 8004c3e:	238b      	movlt	r3, #139	@ 0x8b
 8004c40:	602b      	strlt	r3, [r5, #0]
 8004c42:	2c00      	cmp	r4, #0
 8004c44:	d0e3      	beq.n	8004c0e <_vsniprintf_r+0x16>
 8004c46:	2200      	movs	r2, #0
 8004c48:	9b00      	ldr	r3, [sp, #0]
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e7df      	b.n	8004c0e <_vsniprintf_r+0x16>
	...

08004c50 <vsniprintf>:
 8004c50:	b507      	push	{r0, r1, r2, lr}
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	460a      	mov	r2, r1
 8004c58:	4601      	mov	r1, r0
 8004c5a:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <vsniprintf+0x18>)
 8004c5c:	6800      	ldr	r0, [r0, #0]
 8004c5e:	f7ff ffcb 	bl	8004bf8 <_vsniprintf_r>
 8004c62:	b003      	add	sp, #12
 8004c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c68:	20000014 	.word	0x20000014

08004c6c <memset>:
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4402      	add	r2, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <_reclaim_reent>:
 8004c7c:	4b29      	ldr	r3, [pc, #164]	@ (8004d24 <_reclaim_reent+0xa8>)
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4604      	mov	r4, r0
 8004c84:	4283      	cmp	r3, r0
 8004c86:	d04b      	beq.n	8004d20 <_reclaim_reent+0xa4>
 8004c88:	69c3      	ldr	r3, [r0, #28]
 8004c8a:	b1ab      	cbz	r3, 8004cb8 <_reclaim_reent+0x3c>
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	b16b      	cbz	r3, 8004cac <_reclaim_reent+0x30>
 8004c90:	2500      	movs	r5, #0
 8004c92:	69e3      	ldr	r3, [r4, #28]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	5959      	ldr	r1, [r3, r5]
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	d13b      	bne.n	8004d14 <_reclaim_reent+0x98>
 8004c9c:	3504      	adds	r5, #4
 8004c9e:	2d80      	cmp	r5, #128	@ 0x80
 8004ca0:	d1f7      	bne.n	8004c92 <_reclaim_reent+0x16>
 8004ca2:	69e3      	ldr	r3, [r4, #28]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	68d9      	ldr	r1, [r3, #12]
 8004ca8:	f000 f878 	bl	8004d9c <_free_r>
 8004cac:	69e3      	ldr	r3, [r4, #28]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	b111      	cbz	r1, 8004cb8 <_reclaim_reent+0x3c>
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f000 f872 	bl	8004d9c <_free_r>
 8004cb8:	6961      	ldr	r1, [r4, #20]
 8004cba:	b111      	cbz	r1, 8004cc2 <_reclaim_reent+0x46>
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f000 f86d 	bl	8004d9c <_free_r>
 8004cc2:	69e1      	ldr	r1, [r4, #28]
 8004cc4:	b111      	cbz	r1, 8004ccc <_reclaim_reent+0x50>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 f868 	bl	8004d9c <_free_r>
 8004ccc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004cce:	b111      	cbz	r1, 8004cd6 <_reclaim_reent+0x5a>
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 f863 	bl	8004d9c <_free_r>
 8004cd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cd8:	b111      	cbz	r1, 8004ce0 <_reclaim_reent+0x64>
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f85e 	bl	8004d9c <_free_r>
 8004ce0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004ce2:	b111      	cbz	r1, 8004cea <_reclaim_reent+0x6e>
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f000 f859 	bl	8004d9c <_free_r>
 8004cea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004cec:	b111      	cbz	r1, 8004cf4 <_reclaim_reent+0x78>
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f000 f854 	bl	8004d9c <_free_r>
 8004cf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004cf6:	b111      	cbz	r1, 8004cfe <_reclaim_reent+0x82>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 f84f 	bl	8004d9c <_free_r>
 8004cfe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004d00:	b111      	cbz	r1, 8004d08 <_reclaim_reent+0x8c>
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 f84a 	bl	8004d9c <_free_r>
 8004d08:	6a23      	ldr	r3, [r4, #32]
 8004d0a:	b14b      	cbz	r3, 8004d20 <_reclaim_reent+0xa4>
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d12:	4718      	bx	r3
 8004d14:	680e      	ldr	r6, [r1, #0]
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 f840 	bl	8004d9c <_free_r>
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	e7bb      	b.n	8004c98 <_reclaim_reent+0x1c>
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	bf00      	nop
 8004d24:	20000014 	.word	0x20000014

08004d28 <__errno>:
 8004d28:	4b01      	ldr	r3, [pc, #4]	@ (8004d30 <__errno+0x8>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000014 	.word	0x20000014

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	2600      	movs	r6, #0
 8004d38:	4d0c      	ldr	r5, [pc, #48]	@ (8004d6c <__libc_init_array+0x38>)
 8004d3a:	4c0d      	ldr	r4, [pc, #52]	@ (8004d70 <__libc_init_array+0x3c>)
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	f000 fc78 	bl	8005638 <_init>
 8004d48:	2600      	movs	r6, #0
 8004d4a:	4d0a      	ldr	r5, [pc, #40]	@ (8004d74 <__libc_init_array+0x40>)
 8004d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8004d78 <__libc_init_array+0x44>)
 8004d4e:	1b64      	subs	r4, r4, r5
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	08006128 	.word	0x08006128
 8004d70:	08006128 	.word	0x08006128
 8004d74:	08006128 	.word	0x08006128
 8004d78:	0800612c 	.word	0x0800612c

08004d7c <__retarget_lock_acquire_recursive>:
 8004d7c:	4770      	bx	lr

08004d7e <__retarget_lock_release_recursive>:
 8004d7e:	4770      	bx	lr

08004d80 <memcpy>:
 8004d80:	440a      	add	r2, r1
 8004d82:	4291      	cmp	r1, r2
 8004d84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d88:	d100      	bne.n	8004d8c <memcpy+0xc>
 8004d8a:	4770      	bx	lr
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d98:	d1f9      	bne.n	8004d8e <memcpy+0xe>
 8004d9a:	bd10      	pop	{r4, pc}

08004d9c <_free_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4605      	mov	r5, r0
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d040      	beq.n	8004e26 <_free_r+0x8a>
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f0c      	subs	r4, r1, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfb8      	it	lt
 8004dae:	18e4      	addlt	r4, r4, r3
 8004db0:	f000 f8de 	bl	8004f70 <__malloc_lock>
 8004db4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e28 <_free_r+0x8c>)
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	b933      	cbnz	r3, 8004dc8 <_free_r+0x2c>
 8004dba:	6063      	str	r3, [r4, #4]
 8004dbc:	6014      	str	r4, [r2, #0]
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dc4:	f000 b8da 	b.w	8004f7c <__malloc_unlock>
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d908      	bls.n	8004dde <_free_r+0x42>
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	1821      	adds	r1, r4, r0
 8004dd0:	428b      	cmp	r3, r1
 8004dd2:	bf01      	itttt	eq
 8004dd4:	6819      	ldreq	r1, [r3, #0]
 8004dd6:	685b      	ldreq	r3, [r3, #4]
 8004dd8:	1809      	addeq	r1, r1, r0
 8004dda:	6021      	streq	r1, [r4, #0]
 8004ddc:	e7ed      	b.n	8004dba <_free_r+0x1e>
 8004dde:	461a      	mov	r2, r3
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	b10b      	cbz	r3, 8004de8 <_free_r+0x4c>
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d9fa      	bls.n	8004dde <_free_r+0x42>
 8004de8:	6811      	ldr	r1, [r2, #0]
 8004dea:	1850      	adds	r0, r2, r1
 8004dec:	42a0      	cmp	r0, r4
 8004dee:	d10b      	bne.n	8004e08 <_free_r+0x6c>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	4401      	add	r1, r0
 8004df4:	1850      	adds	r0, r2, r1
 8004df6:	4283      	cmp	r3, r0
 8004df8:	6011      	str	r1, [r2, #0]
 8004dfa:	d1e0      	bne.n	8004dbe <_free_r+0x22>
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4408      	add	r0, r1
 8004e02:	6010      	str	r0, [r2, #0]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	e7da      	b.n	8004dbe <_free_r+0x22>
 8004e08:	d902      	bls.n	8004e10 <_free_r+0x74>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	e7d6      	b.n	8004dbe <_free_r+0x22>
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	1821      	adds	r1, r4, r0
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1809      	addeq	r1, r1, r0
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	6054      	str	r4, [r2, #4]
 8004e24:	e7cb      	b.n	8004dbe <_free_r+0x22>
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	2000131c 	.word	0x2000131c

08004e2c <sbrk_aligned>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e6c <sbrk_aligned+0x40>)
 8004e30:	460c      	mov	r4, r1
 8004e32:	6831      	ldr	r1, [r6, #0]
 8004e34:	4605      	mov	r5, r0
 8004e36:	b911      	cbnz	r1, 8004e3e <sbrk_aligned+0x12>
 8004e38:	f000 fbaa 	bl	8005590 <_sbrk_r>
 8004e3c:	6030      	str	r0, [r6, #0]
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 fba5 	bl	8005590 <_sbrk_r>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	d103      	bne.n	8004e52 <sbrk_aligned+0x26>
 8004e4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e4e:	4620      	mov	r0, r4
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
 8004e52:	1cc4      	adds	r4, r0, #3
 8004e54:	f024 0403 	bic.w	r4, r4, #3
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d0f8      	beq.n	8004e4e <sbrk_aligned+0x22>
 8004e5c:	1a21      	subs	r1, r4, r0
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 fb96 	bl	8005590 <_sbrk_r>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d1f2      	bne.n	8004e4e <sbrk_aligned+0x22>
 8004e68:	e7ef      	b.n	8004e4a <sbrk_aligned+0x1e>
 8004e6a:	bf00      	nop
 8004e6c:	20001318 	.word	0x20001318

08004e70 <_malloc_r>:
 8004e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e74:	1ccd      	adds	r5, r1, #3
 8004e76:	f025 0503 	bic.w	r5, r5, #3
 8004e7a:	3508      	adds	r5, #8
 8004e7c:	2d0c      	cmp	r5, #12
 8004e7e:	bf38      	it	cc
 8004e80:	250c      	movcc	r5, #12
 8004e82:	2d00      	cmp	r5, #0
 8004e84:	4606      	mov	r6, r0
 8004e86:	db01      	blt.n	8004e8c <_malloc_r+0x1c>
 8004e88:	42a9      	cmp	r1, r5
 8004e8a:	d904      	bls.n	8004e96 <_malloc_r+0x26>
 8004e8c:	230c      	movs	r3, #12
 8004e8e:	6033      	str	r3, [r6, #0]
 8004e90:	2000      	movs	r0, #0
 8004e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f6c <_malloc_r+0xfc>
 8004e9a:	f000 f869 	bl	8004f70 <__malloc_lock>
 8004e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	bb44      	cbnz	r4, 8004ef8 <_malloc_r+0x88>
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7ff ffbf 	bl	8004e2c <sbrk_aligned>
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	d158      	bne.n	8004f66 <_malloc_r+0xf6>
 8004eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8004eb8:	4627      	mov	r7, r4
 8004eba:	2f00      	cmp	r7, #0
 8004ebc:	d143      	bne.n	8004f46 <_malloc_r+0xd6>
 8004ebe:	2c00      	cmp	r4, #0
 8004ec0:	d04b      	beq.n	8004f5a <_malloc_r+0xea>
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	eb04 0903 	add.w	r9, r4, r3
 8004ecc:	f000 fb60 	bl	8005590 <_sbrk_r>
 8004ed0:	4581      	cmp	r9, r0
 8004ed2:	d142      	bne.n	8004f5a <_malloc_r+0xea>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	1a6d      	subs	r5, r5, r1
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7ff ffa6 	bl	8004e2c <sbrk_aligned>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d03a      	beq.n	8004f5a <_malloc_r+0xea>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	442b      	add	r3, r5
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	f8d8 3000 	ldr.w	r3, [r8]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	bb62      	cbnz	r2, 8004f4c <_malloc_r+0xdc>
 8004ef2:	f8c8 7000 	str.w	r7, [r8]
 8004ef6:	e00f      	b.n	8004f18 <_malloc_r+0xa8>
 8004ef8:	6822      	ldr	r2, [r4, #0]
 8004efa:	1b52      	subs	r2, r2, r5
 8004efc:	d420      	bmi.n	8004f40 <_malloc_r+0xd0>
 8004efe:	2a0b      	cmp	r2, #11
 8004f00:	d917      	bls.n	8004f32 <_malloc_r+0xc2>
 8004f02:	1961      	adds	r1, r4, r5
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	6025      	str	r5, [r4, #0]
 8004f08:	bf18      	it	ne
 8004f0a:	6059      	strne	r1, [r3, #4]
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	bf08      	it	eq
 8004f10:	f8c8 1000 	streq.w	r1, [r8]
 8004f14:	5162      	str	r2, [r4, r5]
 8004f16:	604b      	str	r3, [r1, #4]
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 f82f 	bl	8004f7c <__malloc_unlock>
 8004f1e:	f104 000b 	add.w	r0, r4, #11
 8004f22:	1d23      	adds	r3, r4, #4
 8004f24:	f020 0007 	bic.w	r0, r0, #7
 8004f28:	1ac2      	subs	r2, r0, r3
 8004f2a:	bf1c      	itt	ne
 8004f2c:	1a1b      	subne	r3, r3, r0
 8004f2e:	50a3      	strne	r3, [r4, r2]
 8004f30:	e7af      	b.n	8004e92 <_malloc_r+0x22>
 8004f32:	6862      	ldr	r2, [r4, #4]
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	bf0c      	ite	eq
 8004f38:	f8c8 2000 	streq.w	r2, [r8]
 8004f3c:	605a      	strne	r2, [r3, #4]
 8004f3e:	e7eb      	b.n	8004f18 <_malloc_r+0xa8>
 8004f40:	4623      	mov	r3, r4
 8004f42:	6864      	ldr	r4, [r4, #4]
 8004f44:	e7ae      	b.n	8004ea4 <_malloc_r+0x34>
 8004f46:	463c      	mov	r4, r7
 8004f48:	687f      	ldr	r7, [r7, #4]
 8004f4a:	e7b6      	b.n	8004eba <_malloc_r+0x4a>
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	42a3      	cmp	r3, r4
 8004f52:	d1fb      	bne.n	8004f4c <_malloc_r+0xdc>
 8004f54:	2300      	movs	r3, #0
 8004f56:	6053      	str	r3, [r2, #4]
 8004f58:	e7de      	b.n	8004f18 <_malloc_r+0xa8>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	6033      	str	r3, [r6, #0]
 8004f60:	f000 f80c 	bl	8004f7c <__malloc_unlock>
 8004f64:	e794      	b.n	8004e90 <_malloc_r+0x20>
 8004f66:	6005      	str	r5, [r0, #0]
 8004f68:	e7d6      	b.n	8004f18 <_malloc_r+0xa8>
 8004f6a:	bf00      	nop
 8004f6c:	2000131c 	.word	0x2000131c

08004f70 <__malloc_lock>:
 8004f70:	4801      	ldr	r0, [pc, #4]	@ (8004f78 <__malloc_lock+0x8>)
 8004f72:	f7ff bf03 	b.w	8004d7c <__retarget_lock_acquire_recursive>
 8004f76:	bf00      	nop
 8004f78:	20001314 	.word	0x20001314

08004f7c <__malloc_unlock>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	@ (8004f84 <__malloc_unlock+0x8>)
 8004f7e:	f7ff befe 	b.w	8004d7e <__retarget_lock_release_recursive>
 8004f82:	bf00      	nop
 8004f84:	20001314 	.word	0x20001314

08004f88 <__ssputs_r>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	461f      	mov	r7, r3
 8004f8e:	688e      	ldr	r6, [r1, #8]
 8004f90:	4682      	mov	sl, r0
 8004f92:	42be      	cmp	r6, r7
 8004f94:	460c      	mov	r4, r1
 8004f96:	4690      	mov	r8, r2
 8004f98:	680b      	ldr	r3, [r1, #0]
 8004f9a:	d82d      	bhi.n	8004ff8 <__ssputs_r+0x70>
 8004f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fa4:	d026      	beq.n	8004ff4 <__ssputs_r+0x6c>
 8004fa6:	6965      	ldr	r5, [r4, #20]
 8004fa8:	6909      	ldr	r1, [r1, #16]
 8004faa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fae:	eba3 0901 	sub.w	r9, r3, r1
 8004fb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fb6:	1c7b      	adds	r3, r7, #1
 8004fb8:	444b      	add	r3, r9
 8004fba:	106d      	asrs	r5, r5, #1
 8004fbc:	429d      	cmp	r5, r3
 8004fbe:	bf38      	it	cc
 8004fc0:	461d      	movcc	r5, r3
 8004fc2:	0553      	lsls	r3, r2, #21
 8004fc4:	d527      	bpl.n	8005016 <__ssputs_r+0x8e>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7ff ff52 	bl	8004e70 <_malloc_r>
 8004fcc:	4606      	mov	r6, r0
 8004fce:	b360      	cbz	r0, 800502a <__ssputs_r+0xa2>
 8004fd0:	464a      	mov	r2, r9
 8004fd2:	6921      	ldr	r1, [r4, #16]
 8004fd4:	f7ff fed4 	bl	8004d80 <memcpy>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	6126      	str	r6, [r4, #16]
 8004fe6:	444e      	add	r6, r9
 8004fe8:	6026      	str	r6, [r4, #0]
 8004fea:	463e      	mov	r6, r7
 8004fec:	6165      	str	r5, [r4, #20]
 8004fee:	eba5 0509 	sub.w	r5, r5, r9
 8004ff2:	60a5      	str	r5, [r4, #8]
 8004ff4:	42be      	cmp	r6, r7
 8004ff6:	d900      	bls.n	8004ffa <__ssputs_r+0x72>
 8004ff8:	463e      	mov	r6, r7
 8004ffa:	4632      	mov	r2, r6
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	f000 faac 	bl	800555c <memmove>
 8005004:	2000      	movs	r0, #0
 8005006:	68a3      	ldr	r3, [r4, #8]
 8005008:	1b9b      	subs	r3, r3, r6
 800500a:	60a3      	str	r3, [r4, #8]
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	4433      	add	r3, r6
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005016:	462a      	mov	r2, r5
 8005018:	f000 fad8 	bl	80055cc <_realloc_r>
 800501c:	4606      	mov	r6, r0
 800501e:	2800      	cmp	r0, #0
 8005020:	d1e0      	bne.n	8004fe4 <__ssputs_r+0x5c>
 8005022:	4650      	mov	r0, sl
 8005024:	6921      	ldr	r1, [r4, #16]
 8005026:	f7ff feb9 	bl	8004d9c <_free_r>
 800502a:	230c      	movs	r3, #12
 800502c:	f8ca 3000 	str.w	r3, [sl]
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	e7e9      	b.n	8005012 <__ssputs_r+0x8a>
	...

08005040 <_svfiprintf_r>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	4698      	mov	r8, r3
 8005046:	898b      	ldrh	r3, [r1, #12]
 8005048:	4607      	mov	r7, r0
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	460d      	mov	r5, r1
 800504e:	4614      	mov	r4, r2
 8005050:	b09d      	sub	sp, #116	@ 0x74
 8005052:	d510      	bpl.n	8005076 <_svfiprintf_r+0x36>
 8005054:	690b      	ldr	r3, [r1, #16]
 8005056:	b973      	cbnz	r3, 8005076 <_svfiprintf_r+0x36>
 8005058:	2140      	movs	r1, #64	@ 0x40
 800505a:	f7ff ff09 	bl	8004e70 <_malloc_r>
 800505e:	6028      	str	r0, [r5, #0]
 8005060:	6128      	str	r0, [r5, #16]
 8005062:	b930      	cbnz	r0, 8005072 <_svfiprintf_r+0x32>
 8005064:	230c      	movs	r3, #12
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800506c:	b01d      	add	sp, #116	@ 0x74
 800506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005072:	2340      	movs	r3, #64	@ 0x40
 8005074:	616b      	str	r3, [r5, #20]
 8005076:	2300      	movs	r3, #0
 8005078:	9309      	str	r3, [sp, #36]	@ 0x24
 800507a:	2320      	movs	r3, #32
 800507c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005080:	2330      	movs	r3, #48	@ 0x30
 8005082:	f04f 0901 	mov.w	r9, #1
 8005086:	f8cd 800c 	str.w	r8, [sp, #12]
 800508a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005224 <_svfiprintf_r+0x1e4>
 800508e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005092:	4623      	mov	r3, r4
 8005094:	469a      	mov	sl, r3
 8005096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509a:	b10a      	cbz	r2, 80050a0 <_svfiprintf_r+0x60>
 800509c:	2a25      	cmp	r2, #37	@ 0x25
 800509e:	d1f9      	bne.n	8005094 <_svfiprintf_r+0x54>
 80050a0:	ebba 0b04 	subs.w	fp, sl, r4
 80050a4:	d00b      	beq.n	80050be <_svfiprintf_r+0x7e>
 80050a6:	465b      	mov	r3, fp
 80050a8:	4622      	mov	r2, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	4638      	mov	r0, r7
 80050ae:	f7ff ff6b 	bl	8004f88 <__ssputs_r>
 80050b2:	3001      	adds	r0, #1
 80050b4:	f000 80a7 	beq.w	8005206 <_svfiprintf_r+0x1c6>
 80050b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050ba:	445a      	add	r2, fp
 80050bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80050be:	f89a 3000 	ldrb.w	r3, [sl]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 809f 	beq.w	8005206 <_svfiprintf_r+0x1c6>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d2:	f10a 0a01 	add.w	sl, sl, #1
 80050d6:	9304      	str	r3, [sp, #16]
 80050d8:	9307      	str	r3, [sp, #28]
 80050da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050de:	931a      	str	r3, [sp, #104]	@ 0x68
 80050e0:	4654      	mov	r4, sl
 80050e2:	2205      	movs	r2, #5
 80050e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e8:	484e      	ldr	r0, [pc, #312]	@ (8005224 <_svfiprintf_r+0x1e4>)
 80050ea:	f000 fa61 	bl	80055b0 <memchr>
 80050ee:	9a04      	ldr	r2, [sp, #16]
 80050f0:	b9d8      	cbnz	r0, 800512a <_svfiprintf_r+0xea>
 80050f2:	06d0      	lsls	r0, r2, #27
 80050f4:	bf44      	itt	mi
 80050f6:	2320      	movmi	r3, #32
 80050f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050fc:	0711      	lsls	r1, r2, #28
 80050fe:	bf44      	itt	mi
 8005100:	232b      	movmi	r3, #43	@ 0x2b
 8005102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005106:	f89a 3000 	ldrb.w	r3, [sl]
 800510a:	2b2a      	cmp	r3, #42	@ 0x2a
 800510c:	d015      	beq.n	800513a <_svfiprintf_r+0xfa>
 800510e:	4654      	mov	r4, sl
 8005110:	2000      	movs	r0, #0
 8005112:	f04f 0c0a 	mov.w	ip, #10
 8005116:	9a07      	ldr	r2, [sp, #28]
 8005118:	4621      	mov	r1, r4
 800511a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800511e:	3b30      	subs	r3, #48	@ 0x30
 8005120:	2b09      	cmp	r3, #9
 8005122:	d94b      	bls.n	80051bc <_svfiprintf_r+0x17c>
 8005124:	b1b0      	cbz	r0, 8005154 <_svfiprintf_r+0x114>
 8005126:	9207      	str	r2, [sp, #28]
 8005128:	e014      	b.n	8005154 <_svfiprintf_r+0x114>
 800512a:	eba0 0308 	sub.w	r3, r0, r8
 800512e:	fa09 f303 	lsl.w	r3, r9, r3
 8005132:	4313      	orrs	r3, r2
 8005134:	46a2      	mov	sl, r4
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	e7d2      	b.n	80050e0 <_svfiprintf_r+0xa0>
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	1d19      	adds	r1, r3, #4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	9103      	str	r1, [sp, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	bfbb      	ittet	lt
 8005146:	425b      	neglt	r3, r3
 8005148:	f042 0202 	orrlt.w	r2, r2, #2
 800514c:	9307      	strge	r3, [sp, #28]
 800514e:	9307      	strlt	r3, [sp, #28]
 8005150:	bfb8      	it	lt
 8005152:	9204      	strlt	r2, [sp, #16]
 8005154:	7823      	ldrb	r3, [r4, #0]
 8005156:	2b2e      	cmp	r3, #46	@ 0x2e
 8005158:	d10a      	bne.n	8005170 <_svfiprintf_r+0x130>
 800515a:	7863      	ldrb	r3, [r4, #1]
 800515c:	2b2a      	cmp	r3, #42	@ 0x2a
 800515e:	d132      	bne.n	80051c6 <_svfiprintf_r+0x186>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	3402      	adds	r4, #2
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	9203      	str	r2, [sp, #12]
 800516a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800516e:	9305      	str	r3, [sp, #20]
 8005170:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005228 <_svfiprintf_r+0x1e8>
 8005174:	2203      	movs	r2, #3
 8005176:	4650      	mov	r0, sl
 8005178:	7821      	ldrb	r1, [r4, #0]
 800517a:	f000 fa19 	bl	80055b0 <memchr>
 800517e:	b138      	cbz	r0, 8005190 <_svfiprintf_r+0x150>
 8005180:	2240      	movs	r2, #64	@ 0x40
 8005182:	9b04      	ldr	r3, [sp, #16]
 8005184:	eba0 000a 	sub.w	r0, r0, sl
 8005188:	4082      	lsls	r2, r0
 800518a:	4313      	orrs	r3, r2
 800518c:	3401      	adds	r4, #1
 800518e:	9304      	str	r3, [sp, #16]
 8005190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005194:	2206      	movs	r2, #6
 8005196:	4825      	ldr	r0, [pc, #148]	@ (800522c <_svfiprintf_r+0x1ec>)
 8005198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800519c:	f000 fa08 	bl	80055b0 <memchr>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d036      	beq.n	8005212 <_svfiprintf_r+0x1d2>
 80051a4:	4b22      	ldr	r3, [pc, #136]	@ (8005230 <_svfiprintf_r+0x1f0>)
 80051a6:	bb1b      	cbnz	r3, 80051f0 <_svfiprintf_r+0x1b0>
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	3307      	adds	r3, #7
 80051ac:	f023 0307 	bic.w	r3, r3, #7
 80051b0:	3308      	adds	r3, #8
 80051b2:	9303      	str	r3, [sp, #12]
 80051b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b6:	4433      	add	r3, r6
 80051b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ba:	e76a      	b.n	8005092 <_svfiprintf_r+0x52>
 80051bc:	460c      	mov	r4, r1
 80051be:	2001      	movs	r0, #1
 80051c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c4:	e7a8      	b.n	8005118 <_svfiprintf_r+0xd8>
 80051c6:	2300      	movs	r3, #0
 80051c8:	f04f 0c0a 	mov.w	ip, #10
 80051cc:	4619      	mov	r1, r3
 80051ce:	3401      	adds	r4, #1
 80051d0:	9305      	str	r3, [sp, #20]
 80051d2:	4620      	mov	r0, r4
 80051d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d8:	3a30      	subs	r2, #48	@ 0x30
 80051da:	2a09      	cmp	r2, #9
 80051dc:	d903      	bls.n	80051e6 <_svfiprintf_r+0x1a6>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0c6      	beq.n	8005170 <_svfiprintf_r+0x130>
 80051e2:	9105      	str	r1, [sp, #20]
 80051e4:	e7c4      	b.n	8005170 <_svfiprintf_r+0x130>
 80051e6:	4604      	mov	r4, r0
 80051e8:	2301      	movs	r3, #1
 80051ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ee:	e7f0      	b.n	80051d2 <_svfiprintf_r+0x192>
 80051f0:	ab03      	add	r3, sp, #12
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	462a      	mov	r2, r5
 80051f6:	4638      	mov	r0, r7
 80051f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <_svfiprintf_r+0x1f4>)
 80051fa:	a904      	add	r1, sp, #16
 80051fc:	f3af 8000 	nop.w
 8005200:	1c42      	adds	r2, r0, #1
 8005202:	4606      	mov	r6, r0
 8005204:	d1d6      	bne.n	80051b4 <_svfiprintf_r+0x174>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	065b      	lsls	r3, r3, #25
 800520a:	f53f af2d 	bmi.w	8005068 <_svfiprintf_r+0x28>
 800520e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005210:	e72c      	b.n	800506c <_svfiprintf_r+0x2c>
 8005212:	ab03      	add	r3, sp, #12
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	462a      	mov	r2, r5
 8005218:	4638      	mov	r0, r7
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <_svfiprintf_r+0x1f4>)
 800521c:	a904      	add	r1, sp, #16
 800521e:	f000 f87d 	bl	800531c <_printf_i>
 8005222:	e7ed      	b.n	8005200 <_svfiprintf_r+0x1c0>
 8005224:	080060ea 	.word	0x080060ea
 8005228:	080060f0 	.word	0x080060f0
 800522c:	080060f4 	.word	0x080060f4
 8005230:	00000000 	.word	0x00000000
 8005234:	08004f89 	.word	0x08004f89

08005238 <_printf_common>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	4698      	mov	r8, r3
 8005240:	688a      	ldr	r2, [r1, #8]
 8005242:	690b      	ldr	r3, [r1, #16]
 8005244:	4607      	mov	r7, r0
 8005246:	4293      	cmp	r3, r2
 8005248:	bfb8      	it	lt
 800524a:	4613      	movlt	r3, r2
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005252:	460c      	mov	r4, r1
 8005254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005258:	b10a      	cbz	r2, 800525e <_printf_common+0x26>
 800525a:	3301      	adds	r3, #1
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	0699      	lsls	r1, r3, #26
 8005262:	bf42      	ittt	mi
 8005264:	6833      	ldrmi	r3, [r6, #0]
 8005266:	3302      	addmi	r3, #2
 8005268:	6033      	strmi	r3, [r6, #0]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	f015 0506 	ands.w	r5, r5, #6
 8005270:	d106      	bne.n	8005280 <_printf_common+0x48>
 8005272:	f104 0a19 	add.w	sl, r4, #25
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	6832      	ldr	r2, [r6, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	42ab      	cmp	r3, r5
 800527e:	dc2b      	bgt.n	80052d8 <_printf_common+0xa0>
 8005280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	3b00      	subs	r3, #0
 8005288:	bf18      	it	ne
 800528a:	2301      	movne	r3, #1
 800528c:	0692      	lsls	r2, r2, #26
 800528e:	d430      	bmi.n	80052f2 <_printf_common+0xba>
 8005290:	4641      	mov	r1, r8
 8005292:	4638      	mov	r0, r7
 8005294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005298:	47c8      	blx	r9
 800529a:	3001      	adds	r0, #1
 800529c:	d023      	beq.n	80052e6 <_printf_common+0xae>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	bf14      	ite	ne
 80052aa:	2500      	movne	r5, #0
 80052ac:	6833      	ldreq	r3, [r6, #0]
 80052ae:	f04f 0600 	mov.w	r6, #0
 80052b2:	bf08      	it	eq
 80052b4:	68e5      	ldreq	r5, [r4, #12]
 80052b6:	f104 041a 	add.w	r4, r4, #26
 80052ba:	bf08      	it	eq
 80052bc:	1aed      	subeq	r5, r5, r3
 80052be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052c2:	bf08      	it	eq
 80052c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfc4      	itt	gt
 80052cc:	1a9b      	subgt	r3, r3, r2
 80052ce:	18ed      	addgt	r5, r5, r3
 80052d0:	42b5      	cmp	r5, r6
 80052d2:	d11a      	bne.n	800530a <_printf_common+0xd2>
 80052d4:	2000      	movs	r0, #0
 80052d6:	e008      	b.n	80052ea <_printf_common+0xb2>
 80052d8:	2301      	movs	r3, #1
 80052da:	4652      	mov	r2, sl
 80052dc:	4641      	mov	r1, r8
 80052de:	4638      	mov	r0, r7
 80052e0:	47c8      	blx	r9
 80052e2:	3001      	adds	r0, #1
 80052e4:	d103      	bne.n	80052ee <_printf_common+0xb6>
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ee:	3501      	adds	r5, #1
 80052f0:	e7c1      	b.n	8005276 <_printf_common+0x3e>
 80052f2:	2030      	movs	r0, #48	@ 0x30
 80052f4:	18e1      	adds	r1, r4, r3
 80052f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005300:	4422      	add	r2, r4
 8005302:	3302      	adds	r3, #2
 8005304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005308:	e7c2      	b.n	8005290 <_printf_common+0x58>
 800530a:	2301      	movs	r3, #1
 800530c:	4622      	mov	r2, r4
 800530e:	4641      	mov	r1, r8
 8005310:	4638      	mov	r0, r7
 8005312:	47c8      	blx	r9
 8005314:	3001      	adds	r0, #1
 8005316:	d0e6      	beq.n	80052e6 <_printf_common+0xae>
 8005318:	3601      	adds	r6, #1
 800531a:	e7d9      	b.n	80052d0 <_printf_common+0x98>

0800531c <_printf_i>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	7e0f      	ldrb	r7, [r1, #24]
 8005322:	4691      	mov	r9, r2
 8005324:	2f78      	cmp	r7, #120	@ 0x78
 8005326:	4680      	mov	r8, r0
 8005328:	460c      	mov	r4, r1
 800532a:	469a      	mov	sl, r3
 800532c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800532e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005332:	d807      	bhi.n	8005344 <_printf_i+0x28>
 8005334:	2f62      	cmp	r7, #98	@ 0x62
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x32>
 8005338:	2f00      	cmp	r7, #0
 800533a:	f000 80d3 	beq.w	80054e4 <_printf_i+0x1c8>
 800533e:	2f58      	cmp	r7, #88	@ 0x58
 8005340:	f000 80ba 	beq.w	80054b8 <_printf_i+0x19c>
 8005344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800534c:	e03a      	b.n	80053c4 <_printf_i+0xa8>
 800534e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005352:	2b15      	cmp	r3, #21
 8005354:	d8f6      	bhi.n	8005344 <_printf_i+0x28>
 8005356:	a101      	add	r1, pc, #4	@ (adr r1, 800535c <_printf_i+0x40>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053c9 	.word	0x080053c9
 8005364:	08005345 	.word	0x08005345
 8005368:	08005345 	.word	0x08005345
 800536c:	08005345 	.word	0x08005345
 8005370:	08005345 	.word	0x08005345
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005345 	.word	0x08005345
 800537c:	08005345 	.word	0x08005345
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	080054cb 	.word	0x080054cb
 800538c:	080053f3 	.word	0x080053f3
 8005390:	08005485 	.word	0x08005485
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054ed 	.word	0x080054ed
 80053a0:	08005345 	.word	0x08005345
 80053a4:	080053f3 	.word	0x080053f3
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	0800548d 	.word	0x0800548d
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6032      	str	r2, [r6, #0]
 80053bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053c4:	2301      	movs	r3, #1
 80053c6:	e09e      	b.n	8005506 <_printf_i+0x1ea>
 80053c8:	6833      	ldr	r3, [r6, #0]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	6031      	str	r1, [r6, #0]
 80053d0:	0606      	lsls	r6, r0, #24
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0xbc>
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	e003      	b.n	80053e0 <_printf_i+0xc4>
 80053d8:	0645      	lsls	r5, r0, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0xb8>
 80053dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	da03      	bge.n	80053ec <_printf_i+0xd0>
 80053e4:	232d      	movs	r3, #45	@ 0x2d
 80053e6:	426d      	negs	r5, r5
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ec:	230a      	movs	r3, #10
 80053ee:	4859      	ldr	r0, [pc, #356]	@ (8005554 <_printf_i+0x238>)
 80053f0:	e011      	b.n	8005416 <_printf_i+0xfa>
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	0608      	lsls	r0, r1, #24
 80053f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053fc:	d402      	bmi.n	8005404 <_printf_i+0xe8>
 80053fe:	0649      	lsls	r1, r1, #25
 8005400:	bf48      	it	mi
 8005402:	b2ad      	uxthmi	r5, r5
 8005404:	2f6f      	cmp	r7, #111	@ 0x6f
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	bf14      	ite	ne
 800540a:	230a      	movne	r3, #10
 800540c:	2308      	moveq	r3, #8
 800540e:	4851      	ldr	r0, [pc, #324]	@ (8005554 <_printf_i+0x238>)
 8005410:	2100      	movs	r1, #0
 8005412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005416:	6866      	ldr	r6, [r4, #4]
 8005418:	2e00      	cmp	r6, #0
 800541a:	bfa8      	it	ge
 800541c:	6821      	ldrge	r1, [r4, #0]
 800541e:	60a6      	str	r6, [r4, #8]
 8005420:	bfa4      	itt	ge
 8005422:	f021 0104 	bicge.w	r1, r1, #4
 8005426:	6021      	strge	r1, [r4, #0]
 8005428:	b90d      	cbnz	r5, 800542e <_printf_i+0x112>
 800542a:	2e00      	cmp	r6, #0
 800542c:	d04b      	beq.n	80054c6 <_printf_i+0x1aa>
 800542e:	4616      	mov	r6, r2
 8005430:	fbb5 f1f3 	udiv	r1, r5, r3
 8005434:	fb03 5711 	mls	r7, r3, r1, r5
 8005438:	5dc7      	ldrb	r7, [r0, r7]
 800543a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800543e:	462f      	mov	r7, r5
 8005440:	42bb      	cmp	r3, r7
 8005442:	460d      	mov	r5, r1
 8005444:	d9f4      	bls.n	8005430 <_printf_i+0x114>
 8005446:	2b08      	cmp	r3, #8
 8005448:	d10b      	bne.n	8005462 <_printf_i+0x146>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	d508      	bpl.n	8005462 <_printf_i+0x146>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	6861      	ldr	r1, [r4, #4]
 8005454:	4299      	cmp	r1, r3
 8005456:	bfde      	ittt	le
 8005458:	2330      	movle	r3, #48	@ 0x30
 800545a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800545e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005462:	1b92      	subs	r2, r2, r6
 8005464:	6122      	str	r2, [r4, #16]
 8005466:	464b      	mov	r3, r9
 8005468:	4621      	mov	r1, r4
 800546a:	4640      	mov	r0, r8
 800546c:	f8cd a000 	str.w	sl, [sp]
 8005470:	aa03      	add	r2, sp, #12
 8005472:	f7ff fee1 	bl	8005238 <_printf_common>
 8005476:	3001      	adds	r0, #1
 8005478:	d14a      	bne.n	8005510 <_printf_i+0x1f4>
 800547a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800547e:	b004      	add	sp, #16
 8005480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	f043 0320 	orr.w	r3, r3, #32
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	2778      	movs	r7, #120	@ 0x78
 800548e:	4832      	ldr	r0, [pc, #200]	@ (8005558 <_printf_i+0x23c>)
 8005490:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	6831      	ldr	r1, [r6, #0]
 8005498:	061f      	lsls	r7, r3, #24
 800549a:	f851 5b04 	ldr.w	r5, [r1], #4
 800549e:	d402      	bmi.n	80054a6 <_printf_i+0x18a>
 80054a0:	065f      	lsls	r7, r3, #25
 80054a2:	bf48      	it	mi
 80054a4:	b2ad      	uxthmi	r5, r5
 80054a6:	6031      	str	r1, [r6, #0]
 80054a8:	07d9      	lsls	r1, r3, #31
 80054aa:	bf44      	itt	mi
 80054ac:	f043 0320 	orrmi.w	r3, r3, #32
 80054b0:	6023      	strmi	r3, [r4, #0]
 80054b2:	b11d      	cbz	r5, 80054bc <_printf_i+0x1a0>
 80054b4:	2310      	movs	r3, #16
 80054b6:	e7ab      	b.n	8005410 <_printf_i+0xf4>
 80054b8:	4826      	ldr	r0, [pc, #152]	@ (8005554 <_printf_i+0x238>)
 80054ba:	e7e9      	b.n	8005490 <_printf_i+0x174>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	e7f6      	b.n	80054b4 <_printf_i+0x198>
 80054c6:	4616      	mov	r6, r2
 80054c8:	e7bd      	b.n	8005446 <_printf_i+0x12a>
 80054ca:	6833      	ldr	r3, [r6, #0]
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1d18      	adds	r0, r3, #4
 80054d0:	6961      	ldr	r1, [r4, #20]
 80054d2:	6030      	str	r0, [r6, #0]
 80054d4:	062e      	lsls	r6, r5, #24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	d501      	bpl.n	80054de <_printf_i+0x1c2>
 80054da:	6019      	str	r1, [r3, #0]
 80054dc:	e002      	b.n	80054e4 <_printf_i+0x1c8>
 80054de:	0668      	lsls	r0, r5, #25
 80054e0:	d5fb      	bpl.n	80054da <_printf_i+0x1be>
 80054e2:	8019      	strh	r1, [r3, #0]
 80054e4:	2300      	movs	r3, #0
 80054e6:	4616      	mov	r6, r2
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	e7bc      	b.n	8005466 <_printf_i+0x14a>
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	2100      	movs	r1, #0
 80054f0:	1d1a      	adds	r2, r3, #4
 80054f2:	6032      	str	r2, [r6, #0]
 80054f4:	681e      	ldr	r6, [r3, #0]
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	4630      	mov	r0, r6
 80054fa:	f000 f859 	bl	80055b0 <memchr>
 80054fe:	b108      	cbz	r0, 8005504 <_printf_i+0x1e8>
 8005500:	1b80      	subs	r0, r0, r6
 8005502:	6060      	str	r0, [r4, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	2300      	movs	r3, #0
 800550a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550e:	e7aa      	b.n	8005466 <_printf_i+0x14a>
 8005510:	4632      	mov	r2, r6
 8005512:	4649      	mov	r1, r9
 8005514:	4640      	mov	r0, r8
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	47d0      	blx	sl
 800551a:	3001      	adds	r0, #1
 800551c:	d0ad      	beq.n	800547a <_printf_i+0x15e>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	079b      	lsls	r3, r3, #30
 8005522:	d413      	bmi.n	800554c <_printf_i+0x230>
 8005524:	68e0      	ldr	r0, [r4, #12]
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	4298      	cmp	r0, r3
 800552a:	bfb8      	it	lt
 800552c:	4618      	movlt	r0, r3
 800552e:	e7a6      	b.n	800547e <_printf_i+0x162>
 8005530:	2301      	movs	r3, #1
 8005532:	4632      	mov	r2, r6
 8005534:	4649      	mov	r1, r9
 8005536:	4640      	mov	r0, r8
 8005538:	47d0      	blx	sl
 800553a:	3001      	adds	r0, #1
 800553c:	d09d      	beq.n	800547a <_printf_i+0x15e>
 800553e:	3501      	adds	r5, #1
 8005540:	68e3      	ldr	r3, [r4, #12]
 8005542:	9903      	ldr	r1, [sp, #12]
 8005544:	1a5b      	subs	r3, r3, r1
 8005546:	42ab      	cmp	r3, r5
 8005548:	dcf2      	bgt.n	8005530 <_printf_i+0x214>
 800554a:	e7eb      	b.n	8005524 <_printf_i+0x208>
 800554c:	2500      	movs	r5, #0
 800554e:	f104 0619 	add.w	r6, r4, #25
 8005552:	e7f5      	b.n	8005540 <_printf_i+0x224>
 8005554:	080060fb 	.word	0x080060fb
 8005558:	0800610c 	.word	0x0800610c

0800555c <memmove>:
 800555c:	4288      	cmp	r0, r1
 800555e:	b510      	push	{r4, lr}
 8005560:	eb01 0402 	add.w	r4, r1, r2
 8005564:	d902      	bls.n	800556c <memmove+0x10>
 8005566:	4284      	cmp	r4, r0
 8005568:	4623      	mov	r3, r4
 800556a:	d807      	bhi.n	800557c <memmove+0x20>
 800556c:	1e43      	subs	r3, r0, #1
 800556e:	42a1      	cmp	r1, r4
 8005570:	d008      	beq.n	8005584 <memmove+0x28>
 8005572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557a:	e7f8      	b.n	800556e <memmove+0x12>
 800557c:	4601      	mov	r1, r0
 800557e:	4402      	add	r2, r0
 8005580:	428a      	cmp	r2, r1
 8005582:	d100      	bne.n	8005586 <memmove+0x2a>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800558e:	e7f7      	b.n	8005580 <memmove+0x24>

08005590 <_sbrk_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	2300      	movs	r3, #0
 8005594:	4d05      	ldr	r5, [pc, #20]	@ (80055ac <_sbrk_r+0x1c>)
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fb ff58 	bl	8001450 <_sbrk>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_sbrk_r+0x1a>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_sbrk_r+0x1a>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	20001310 	.word	0x20001310

080055b0 <memchr>:
 80055b0:	4603      	mov	r3, r0
 80055b2:	b510      	push	{r4, lr}
 80055b4:	b2c9      	uxtb	r1, r1
 80055b6:	4402      	add	r2, r0
 80055b8:	4293      	cmp	r3, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	d101      	bne.n	80055c2 <memchr+0x12>
 80055be:	2000      	movs	r0, #0
 80055c0:	e003      	b.n	80055ca <memchr+0x1a>
 80055c2:	7804      	ldrb	r4, [r0, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	428c      	cmp	r4, r1
 80055c8:	d1f6      	bne.n	80055b8 <memchr+0x8>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <_realloc_r>:
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d0:	4680      	mov	r8, r0
 80055d2:	4615      	mov	r5, r2
 80055d4:	460c      	mov	r4, r1
 80055d6:	b921      	cbnz	r1, 80055e2 <_realloc_r+0x16>
 80055d8:	4611      	mov	r1, r2
 80055da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055de:	f7ff bc47 	b.w	8004e70 <_malloc_r>
 80055e2:	b92a      	cbnz	r2, 80055f0 <_realloc_r+0x24>
 80055e4:	f7ff fbda 	bl	8004d9c <_free_r>
 80055e8:	2400      	movs	r4, #0
 80055ea:	4620      	mov	r0, r4
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f0:	f000 f81a 	bl	8005628 <_malloc_usable_size_r>
 80055f4:	4285      	cmp	r5, r0
 80055f6:	4606      	mov	r6, r0
 80055f8:	d802      	bhi.n	8005600 <_realloc_r+0x34>
 80055fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055fe:	d8f4      	bhi.n	80055ea <_realloc_r+0x1e>
 8005600:	4629      	mov	r1, r5
 8005602:	4640      	mov	r0, r8
 8005604:	f7ff fc34 	bl	8004e70 <_malloc_r>
 8005608:	4607      	mov	r7, r0
 800560a:	2800      	cmp	r0, #0
 800560c:	d0ec      	beq.n	80055e8 <_realloc_r+0x1c>
 800560e:	42b5      	cmp	r5, r6
 8005610:	462a      	mov	r2, r5
 8005612:	4621      	mov	r1, r4
 8005614:	bf28      	it	cs
 8005616:	4632      	movcs	r2, r6
 8005618:	f7ff fbb2 	bl	8004d80 <memcpy>
 800561c:	4621      	mov	r1, r4
 800561e:	4640      	mov	r0, r8
 8005620:	f7ff fbbc 	bl	8004d9c <_free_r>
 8005624:	463c      	mov	r4, r7
 8005626:	e7e0      	b.n	80055ea <_realloc_r+0x1e>

08005628 <_malloc_usable_size_r>:
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f18      	subs	r0, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfbc      	itt	lt
 8005632:	580b      	ldrlt	r3, [r1, r0]
 8005634:	18c0      	addlt	r0, r0, r3
 8005636:	4770      	bx	lr

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
